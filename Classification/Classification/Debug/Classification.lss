
Classification.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000174  00800200  000011b8  0000124c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000029  00800374  00800374  000013c0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000013c0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000013f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  00001430  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002197  00000000  00000000  00001560  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f4b  00000000  00000000  000036f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fac  00000000  00000000  00004642  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000434  00000000  00000000  000055f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000084d  00000000  00000000  00005a24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000112d  00000000  00000000  00006271  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  0000739e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	4e c3       	rjmp	.+1692   	; 0x6a2 <__vector_1>
       6:	00 00       	nop
       8:	43 c7       	rjmp	.+3718   	; 0xe90 <__vector_2>
       a:	00 00       	nop
       c:	b0 c3       	rjmp	.+1888   	; 0x76e <__vector_3>
       e:	00 00       	nop
      10:	b5 c1       	rjmp	.+874    	; 0x37c <__vector_4>
      12:	00 00       	nop
      14:	87 c0       	rjmp	.+270    	; 0x124 <__bad_interrupt>
      16:	00 00       	nop
      18:	85 c0       	rjmp	.+266    	; 0x124 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	83 c0       	rjmp	.+262    	; 0x124 <__bad_interrupt>
      1e:	00 00       	nop
      20:	81 c0       	rjmp	.+258    	; 0x124 <__bad_interrupt>
      22:	00 00       	nop
      24:	7f c0       	rjmp	.+254    	; 0x124 <__bad_interrupt>
      26:	00 00       	nop
      28:	7d c0       	rjmp	.+250    	; 0x124 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7b c0       	rjmp	.+246    	; 0x124 <__bad_interrupt>
      2e:	00 00       	nop
      30:	79 c0       	rjmp	.+242    	; 0x124 <__bad_interrupt>
      32:	00 00       	nop
      34:	77 c0       	rjmp	.+238    	; 0x124 <__bad_interrupt>
      36:	00 00       	nop
      38:	75 c0       	rjmp	.+234    	; 0x124 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	73 c0       	rjmp	.+230    	; 0x124 <__bad_interrupt>
      3e:	00 00       	nop
      40:	71 c0       	rjmp	.+226    	; 0x124 <__bad_interrupt>
      42:	00 00       	nop
      44:	6f c0       	rjmp	.+222    	; 0x124 <__bad_interrupt>
      46:	00 00       	nop
      48:	6d c0       	rjmp	.+218    	; 0x124 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6b c0       	rjmp	.+214    	; 0x124 <__bad_interrupt>
      4e:	00 00       	nop
      50:	69 c0       	rjmp	.+210    	; 0x124 <__bad_interrupt>
      52:	00 00       	nop
      54:	67 c0       	rjmp	.+206    	; 0x124 <__bad_interrupt>
      56:	00 00       	nop
      58:	65 c0       	rjmp	.+202    	; 0x124 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	63 c0       	rjmp	.+198    	; 0x124 <__bad_interrupt>
      5e:	00 00       	nop
      60:	61 c0       	rjmp	.+194    	; 0x124 <__bad_interrupt>
      62:	00 00       	nop
      64:	5f c0       	rjmp	.+190    	; 0x124 <__bad_interrupt>
      66:	00 00       	nop
      68:	5d c0       	rjmp	.+186    	; 0x124 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5b c0       	rjmp	.+182    	; 0x124 <__bad_interrupt>
      6e:	00 00       	nop
      70:	59 c0       	rjmp	.+178    	; 0x124 <__bad_interrupt>
      72:	00 00       	nop
      74:	94 c1       	rjmp	.+808    	; 0x39e <__vector_29>
      76:	00 00       	nop
      78:	55 c0       	rjmp	.+170    	; 0x124 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	53 c0       	rjmp	.+166    	; 0x124 <__bad_interrupt>
      7e:	00 00       	nop
      80:	51 c0       	rjmp	.+162    	; 0x124 <__bad_interrupt>
      82:	00 00       	nop
      84:	49 c2       	rjmp	.+1170   	; 0x518 <__vector_33>
      86:	00 00       	nop
      88:	4d c0       	rjmp	.+154    	; 0x124 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4b c0       	rjmp	.+150    	; 0x124 <__bad_interrupt>
      8e:	00 00       	nop
      90:	49 c0       	rjmp	.+146    	; 0x124 <__bad_interrupt>
      92:	00 00       	nop
      94:	47 c0       	rjmp	.+142    	; 0x124 <__bad_interrupt>
      96:	00 00       	nop
      98:	45 c0       	rjmp	.+138    	; 0x124 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	43 c0       	rjmp	.+134    	; 0x124 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	41 c0       	rjmp	.+130    	; 0x124 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3f c0       	rjmp	.+126    	; 0x124 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3d c0       	rjmp	.+122    	; 0x124 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3b c0       	rjmp	.+118    	; 0x124 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	39 c0       	rjmp	.+114    	; 0x124 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	37 c0       	rjmp	.+110    	; 0x124 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	35 c0       	rjmp	.+106    	; 0x124 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	33 c0       	rjmp	.+102    	; 0x124 <__bad_interrupt>
      be:	00 00       	nop
      c0:	31 c0       	rjmp	.+98     	; 0x124 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2f c0       	rjmp	.+94     	; 0x124 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2d c0       	rjmp	.+90     	; 0x124 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2b c0       	rjmp	.+86     	; 0x124 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	29 c0       	rjmp	.+82     	; 0x124 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	27 c0       	rjmp	.+78     	; 0x124 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	25 c0       	rjmp	.+74     	; 0x124 <__bad_interrupt>
      da:	00 00       	nop
      dc:	23 c0       	rjmp	.+70     	; 0x124 <__bad_interrupt>
      de:	00 00       	nop
      e0:	21 c0       	rjmp	.+66     	; 0x124 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	13 e0       	ldi	r17, 0x03	; 3
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e8 eb       	ldi	r30, 0xB8	; 184
      fc:	f1 e1       	ldi	r31, 0x11	; 17
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a4 37       	cpi	r26, 0x74	; 116
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	23 e0       	ldi	r18, 0x03	; 3
     110:	a4 e7       	ldi	r26, 0x74	; 116
     112:	b3 e0       	ldi	r27, 0x03	; 3
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	ad 39       	cpi	r26, 0x9D	; 157
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	eb d5       	rcall	.+3030   	; 0xcf6 <main>
     120:	0c 94 da 08 	jmp	0x11b4	; 0x11b4 <_exit>

00000124 <__bad_interrupt>:
     124:	5f c2       	rjmp	.+1214   	; 0x5e4 <__vector_default>

00000126 <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=0xF0;
     126:	87 b1       	in	r24, 0x07	; 7
     128:	80 7f       	andi	r24, 0xF0	; 240
     12a:	87 b9       	out	0x07, r24	; 7

	//change LCD mode
	SET_RW();		//Read mode
     12c:	88 b1       	in	r24, 0x08	; 8
     12e:	80 62       	ori	r24, 0x20	; 32
     130:	88 b9       	out	0x08, r24	; 8
	CLEAR_RS();		//Read status
     132:	88 b1       	in	r24, 0x08	; 8
     134:	8f 7b       	andi	r24, 0xBF	; 191
     136:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     138:	82 e0       	ldi	r24, 0x02	; 2
     13a:	8a 95       	dec	r24
     13c:	f1 f7       	brne	.-4      	; 0x13a <LCDBusyLoop+0x14>
     13e:	00 c0       	rjmp	.+0      	; 0x140 <LCDBusyLoop+0x1a>
	_delay_us(0.5);		//tAS
	
	do
	{

		SET_E();
     140:	88 b1       	in	r24, 0x08	; 8
     142:	80 68       	ori	r24, 0x80	; 128
     144:	88 b9       	out	0x08, r24	; 8
     146:	92 e0       	ldi	r25, 0x02	; 2
     148:	9a 95       	dec	r25
     14a:	f1 f7       	brne	.-4      	; 0x148 <LCDBusyLoop+0x22>
     14c:	00 c0       	rjmp	.+0      	; 0x14e <LCDBusyLoop+0x28>

		//Wait tDA for data to become available
		_delay_us(0.5);
		
		status=LCD_DATA_PIN;
     14e:	86 b1       	in	r24, 0x06	; 6
		status=status<<4;
     150:	82 95       	swap	r24
     152:	80 7f       	andi	r24, 0xF0	; 240
     154:	92 e0       	ldi	r25, 0x02	; 2
     156:	9a 95       	dec	r25
     158:	f1 f7       	brne	.-4      	; 0x156 <LCDBusyLoop+0x30>
     15a:	00 c0       	rjmp	.+0      	; 0x15c <LCDBusyLoop+0x36>

		_delay_us(0.5);
		
		//Pull E low
		CLEAR_E();
     15c:	98 b1       	in	r25, 0x08	; 8
     15e:	9f 77       	andi	r25, 0x7F	; 127
     160:	98 b9       	out	0x08, r25	; 8
     162:	95 e0       	ldi	r25, 0x05	; 5
     164:	9a 95       	dec	r25
     166:	f1 f7       	brne	.-4      	; 0x164 <LCDBusyLoop+0x3e>
     168:	00 00       	nop
		_delay_us(1);	//tEL
		
		SET_E();
     16a:	98 b1       	in	r25, 0x08	; 8
     16c:	90 68       	ori	r25, 0x80	; 128
     16e:	98 b9       	out	0x08, r25	; 8
     170:	92 e0       	ldi	r25, 0x02	; 2
     172:	9a 95       	dec	r25
     174:	f1 f7       	brne	.-4      	; 0x172 <LCDBusyLoop+0x4c>
     176:	00 c0       	rjmp	.+0      	; 0x178 <LCDBusyLoop+0x52>
		_delay_us(0.5);
		
		temp=LCD_DATA_PIN;
     178:	96 b1       	in	r25, 0x06	; 6
		temp&=0x0F;

		status=status|temp;

		busy=status & 0b10000000;
     17a:	80 78       	andi	r24, 0x80	; 128
     17c:	92 e0       	ldi	r25, 0x02	; 2
     17e:	9a 95       	dec	r25
     180:	f1 f7       	brne	.-4      	; 0x17e <LCDBusyLoop+0x58>
     182:	00 c0       	rjmp	.+0      	; 0x184 <LCDBusyLoop+0x5e>

		_delay_us(0.5);
		
		CLEAR_E();
     184:	98 b1       	in	r25, 0x08	; 8
     186:	9f 77       	andi	r25, 0x7F	; 127
     188:	98 b9       	out	0x08, r25	; 8
     18a:	95 e0       	ldi	r25, 0x05	; 5
     18c:	9a 95       	dec	r25
     18e:	f1 f7       	brne	.-4      	; 0x18c <LCDBusyLoop+0x66>
     190:	00 00       	nop
		_delay_us(1);	//tEL
		
	}while(busy);
     192:	81 11       	cpse	r24, r1
     194:	d5 cf       	rjmp	.-86     	; 0x140 <LCDBusyLoop+0x1a>

	CLEAR_RW();		//write mode
     196:	88 b1       	in	r24, 0x08	; 8
     198:	8f 7d       	andi	r24, 0xDF	; 223
     19a:	88 b9       	out	0x08, r24	; 8
	//Change Port to output
	LCD_DATA_DDR|=0x0F;
     19c:	87 b1       	in	r24, 0x07	; 7
     19e:	8f 60       	ori	r24, 0x0F	; 15
     1a0:	87 b9       	out	0x07, r24	; 7
     1a2:	08 95       	ret

000001a4 <LCDByte>:
//NOTE: THIS FUNCTION RETURS ONLY WHEN LCD HAS PROCESSED THE COMMAND

uint8_t hn,ln;			//Nibbles
uint8_t temp;

hn=c>>4;
     1a4:	28 2f       	mov	r18, r24
     1a6:	22 95       	swap	r18
     1a8:	2f 70       	andi	r18, 0x0F	; 15
ln=(c & 0x0F);
     1aa:	8f 70       	andi	r24, 0x0F	; 15

if(isdata==0)
     1ac:	61 11       	cpse	r22, r1
     1ae:	04 c0       	rjmp	.+8      	; 0x1b8 <LCDByte+0x14>
	CLEAR_RS();
     1b0:	98 b1       	in	r25, 0x08	; 8
     1b2:	9f 7b       	andi	r25, 0xBF	; 191
     1b4:	98 b9       	out	0x08, r25	; 8
     1b6:	03 c0       	rjmp	.+6      	; 0x1be <LCDByte+0x1a>
else
	SET_RS();
     1b8:	98 b1       	in	r25, 0x08	; 8
     1ba:	90 64       	ori	r25, 0x40	; 64
     1bc:	98 b9       	out	0x08, r25	; 8
     1be:	92 e0       	ldi	r25, 0x02	; 2
     1c0:	9a 95       	dec	r25
     1c2:	f1 f7       	brne	.-4      	; 0x1c0 <LCDByte+0x1c>
     1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <LCDByte+0x22>

_delay_us(0.500);		//tAS


SET_E();
     1c6:	98 b1       	in	r25, 0x08	; 8
     1c8:	90 68       	ori	r25, 0x80	; 128
     1ca:	98 b9       	out	0x08, r25	; 8

//Send high nibble

temp=(LCD_DATA_PORT & 0XF0)|(hn);
     1cc:	98 b1       	in	r25, 0x08	; 8
     1ce:	90 7f       	andi	r25, 0xF0	; 240
     1d0:	92 2b       	or	r25, r18
LCD_DATA_PORT=temp;
     1d2:	98 b9       	out	0x08, r25	; 8
     1d4:	95 e0       	ldi	r25, 0x05	; 5
     1d6:	9a 95       	dec	r25
     1d8:	f1 f7       	brne	.-4      	; 0x1d6 <LCDByte+0x32>
     1da:	00 00       	nop
_delay_us(1);			//tEH


//Now data lines are stable pull E low for transmission

CLEAR_E();
     1dc:	98 b1       	in	r25, 0x08	; 8
     1de:	9f 77       	andi	r25, 0x7F	; 127
     1e0:	98 b9       	out	0x08, r25	; 8
     1e2:	95 e0       	ldi	r25, 0x05	; 5
     1e4:	9a 95       	dec	r25
     1e6:	f1 f7       	brne	.-4      	; 0x1e4 <LCDByte+0x40>
     1e8:	00 00       	nop

_delay_us(1);

//Send the lower nibble
SET_E();
     1ea:	98 b1       	in	r25, 0x08	; 8
     1ec:	90 68       	ori	r25, 0x80	; 128
     1ee:	98 b9       	out	0x08, r25	; 8

temp=(LCD_DATA_PORT & 0XF0)|(ln);
     1f0:	98 b1       	in	r25, 0x08	; 8
     1f2:	90 7f       	andi	r25, 0xF0	; 240
     1f4:	89 2b       	or	r24, r25

LCD_DATA_PORT=temp;
     1f6:	88 b9       	out	0x08, r24	; 8
     1f8:	85 e0       	ldi	r24, 0x05	; 5
     1fa:	8a 95       	dec	r24
     1fc:	f1 f7       	brne	.-4      	; 0x1fa <LCDByte+0x56>
     1fe:	00 00       	nop
_delay_us(1);			//tEH
						//Do not wait too long, 1 us is good

//SEND

CLEAR_E();
     200:	88 b1       	in	r24, 0x08	; 8
     202:	8f 77       	andi	r24, 0x7F	; 127
     204:	88 b9       	out	0x08, r24	; 8
     206:	95 e0       	ldi	r25, 0x05	; 5
     208:	9a 95       	dec	r25
     20a:	f1 f7       	brne	.-4      	; 0x208 <LCDByte+0x64>
     20c:	00 00       	nop

_delay_us(1);			//tEL

LCDBusyLoop();
     20e:	8b cf       	rjmp	.-234    	; 0x126 <LCDBusyLoop>
     210:	08 95       	ret

00000212 <InitLCD>:
	LCD_DATA_DDR|=0x0F;

}

void InitLCD(uint8_t style)
{
     212:	cf 93       	push	r28
     214:	c8 2f       	mov	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     216:	2f ef       	ldi	r18, 0xFF	; 255
     218:	86 e7       	ldi	r24, 0x76	; 118
     21a:	91 e0       	ldi	r25, 0x01	; 1
     21c:	21 50       	subi	r18, 0x01	; 1
     21e:	80 40       	sbci	r24, 0x00	; 0
     220:	90 40       	sbci	r25, 0x00	; 0
     222:	e1 f7       	brne	.-8      	; 0x21c <InitLCD+0xa>
     224:	00 c0       	rjmp	.+0      	; 0x226 <InitLCD+0x14>
     226:	00 00       	nop
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
		
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F);
     228:	87 b1       	in	r24, 0x07	; 7
     22a:	8f 60       	ori	r24, 0x0F	; 15
     22c:	87 b9       	out	0x07, r24	; 7
	LCD_E_DDR|=(1<<LCD_E_POS);
     22e:	87 b1       	in	r24, 0x07	; 7
     230:	80 68       	ori	r24, 0x80	; 128
     232:	87 b9       	out	0x07, r24	; 7
	LCD_RS_DDR|=(1<<LCD_RS_POS);
     234:	87 b1       	in	r24, 0x07	; 7
     236:	80 64       	ori	r24, 0x40	; 64
     238:	87 b9       	out	0x07, r24	; 7
	LCD_RW_DDR|=(1<<LCD_RW_POS);
     23a:	87 b1       	in	r24, 0x07	; 7
     23c:	80 62       	ori	r24, 0x20	; 32
     23e:	87 b9       	out	0x07, r24	; 7

	LCD_DATA_PORT&=0XF0;
     240:	88 b1       	in	r24, 0x08	; 8
     242:	80 7f       	andi	r24, 0xF0	; 240
     244:	88 b9       	out	0x08, r24	; 8
	CLEAR_E();
     246:	88 b1       	in	r24, 0x08	; 8
     248:	8f 77       	andi	r24, 0x7F	; 127
     24a:	88 b9       	out	0x08, r24	; 8
	CLEAR_RW();
     24c:	88 b1       	in	r24, 0x08	; 8
     24e:	8f 7d       	andi	r24, 0xDF	; 223
     250:	88 b9       	out	0x08, r24	; 8
	CLEAR_RS();
     252:	88 b1       	in	r24, 0x08	; 8
     254:	8f 7b       	andi	r24, 0xBF	; 191
     256:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     258:	00 c0       	rjmp	.+0      	; 0x25a <InitLCD+0x48>
     25a:	00 c0       	rjmp	.+0      	; 0x25c <InitLCD+0x4a>
     25c:	00 00       	nop

	//Set 4-bit mode
	_delay_us(0.3);	//tAS
	
	SET_E();
     25e:	88 b1       	in	r24, 0x08	; 8
     260:	80 68       	ori	r24, 0x80	; 128
     262:	88 b9       	out	0x08, r24	; 8
	LCD_DATA_PORT|=(0b00000010); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
     264:	88 b1       	in	r24, 0x08	; 8
     266:	82 60       	ori	r24, 0x02	; 2
     268:	88 b9       	out	0x08, r24	; 8
     26a:	25 e0       	ldi	r18, 0x05	; 5
     26c:	2a 95       	dec	r18
     26e:	f1 f7       	brne	.-4      	; 0x26c <InitLCD+0x5a>
     270:	00 00       	nop
	_delay_us(1);
	
	CLEAR_E();
     272:	88 b1       	in	r24, 0x08	; 8
     274:	8f 77       	andi	r24, 0x7F	; 127
     276:	88 b9       	out	0x08, r24	; 8
     278:	85 e0       	ldi	r24, 0x05	; 5
     27a:	8a 95       	dec	r24
     27c:	f1 f7       	brne	.-4      	; 0x27a <InitLCD+0x68>
     27e:	00 00       	nop
	_delay_us(1);
		
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
     280:	52 df       	rcall	.-348    	; 0x126 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
     282:	60 e0       	ldi	r22, 0x00	; 0
     284:	8c 2f       	mov	r24, r28
     286:	8c 60       	ori	r24, 0x0C	; 12
     288:	8d df       	rcall	.-230    	; 0x1a4 <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
     28a:	60 e0       	ldi	r22, 0x00	; 0
     28c:	88 e2       	ldi	r24, 0x28	; 40
     28e:	8a df       	rcall	.-236    	; 0x1a4 <LCDByte>
}
     290:	cf 91       	pop	r28
     292:	08 95       	ret

00000294 <LCDWriteString>:
void LCDWriteString(const char *msg)
{
     294:	cf 93       	push	r28
     296:	df 93       	push	r29
     298:	ec 01       	movw	r28, r24
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
     29a:	03 c0       	rjmp	.+6      	; 0x2a2 <LCDWriteString+0xe>
 {
	LCDData(*msg);
     29c:	61 e0       	ldi	r22, 0x01	; 1
     29e:	82 df       	rcall	.-252    	; 0x1a4 <LCDByte>
	msg++;
     2a0:	21 96       	adiw	r28, 0x01	; 1
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
     2a2:	88 81       	ld	r24, Y
     2a4:	81 11       	cpse	r24, r1
     2a6:	fa cf       	rjmp	.-12     	; 0x29c <LCDWriteString+0x8>
 {
	LCDData(*msg);
	msg++;
 }
}
     2a8:	df 91       	pop	r29
     2aa:	cf 91       	pop	r28
     2ac:	08 95       	ret

000002ae <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
     2ae:	ef 92       	push	r14
     2b0:	ff 92       	push	r15
     2b2:	0f 93       	push	r16
     2b4:	1f 93       	push	r17
     2b6:	cf 93       	push	r28
     2b8:	df 93       	push	r29
     2ba:	00 d0       	rcall	.+0      	; 0x2bc <LCDWriteInt+0xe>
     2bc:	1f 92       	push	r1
     2be:	1f 92       	push	r1
     2c0:	cd b7       	in	r28, 0x3d	; 61
     2c2:	de b7       	in	r29, 0x3e	; 62
     2c4:	7b 01       	movw	r14, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
     2c6:	fe 01       	movw	r30, r28
     2c8:	31 96       	adiw	r30, 0x01	; 1
     2ca:	25 e0       	ldi	r18, 0x05	; 5
     2cc:	df 01       	movw	r26, r30
     2ce:	1d 92       	st	X+, r1
     2d0:	2a 95       	dec	r18
     2d2:	e9 f7       	brne	.-6      	; 0x2ce <LCDWriteInt+0x20>
	int i=4,j=0;
     2d4:	24 e0       	ldi	r18, 0x04	; 4
     2d6:	30 e0       	ldi	r19, 0x00	; 0
	while(val)
     2d8:	0e c0       	rjmp	.+28     	; 0x2f6 <LCDWriteInt+0x48>
	{
	str[i]=val%10;
     2da:	6a e0       	ldi	r22, 0x0A	; 10
     2dc:	70 e0       	ldi	r23, 0x00	; 0
     2de:	22 d6       	rcall	.+3140   	; 0xf24 <__divmodhi4>
     2e0:	e1 e0       	ldi	r30, 0x01	; 1
     2e2:	f0 e0       	ldi	r31, 0x00	; 0
     2e4:	ec 0f       	add	r30, r28
     2e6:	fd 1f       	adc	r31, r29
     2e8:	e2 0f       	add	r30, r18
     2ea:	f3 1f       	adc	r31, r19
     2ec:	80 83       	st	Z, r24
	val=val/10;
     2ee:	86 2f       	mov	r24, r22
     2f0:	97 2f       	mov	r25, r23
	i--;
     2f2:	21 50       	subi	r18, 0x01	; 1
     2f4:	31 09       	sbc	r19, r1

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
     2f6:	00 97       	sbiw	r24, 0x00	; 0
     2f8:	81 f7       	brne	.-32     	; 0x2da <LCDWriteInt+0x2c>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
     2fa:	bf ef       	ldi	r27, 0xFF	; 255
     2fc:	eb 16       	cp	r14, r27
     2fe:	fb 06       	cpc	r15, r27
     300:	81 f4       	brne	.+32     	; 0x322 <LCDWriteInt+0x74>
     302:	03 c0       	rjmp	.+6      	; 0x30a <LCDWriteInt+0x5c>
		while(str[j]==0) j++;
     304:	0f 5f       	subi	r16, 0xFF	; 255
     306:	1f 4f       	sbci	r17, 0xFF	; 255
     308:	02 c0       	rjmp	.+4      	; 0x30e <LCDWriteInt+0x60>
     30a:	00 e0       	ldi	r16, 0x00	; 0
     30c:	10 e0       	ldi	r17, 0x00	; 0
     30e:	e1 e0       	ldi	r30, 0x01	; 1
     310:	f0 e0       	ldi	r31, 0x00	; 0
     312:	ec 0f       	add	r30, r28
     314:	fd 1f       	adc	r31, r29
     316:	e0 0f       	add	r30, r16
     318:	f1 1f       	adc	r31, r17
     31a:	20 81       	ld	r18, Z
     31c:	22 23       	and	r18, r18
     31e:	91 f3       	breq	.-28     	; 0x304 <LCDWriteInt+0x56>
     320:	04 c0       	rjmp	.+8      	; 0x32a <LCDWriteInt+0x7c>
	else
		j=5-field_length;
     322:	05 e0       	ldi	r16, 0x05	; 5
     324:	10 e0       	ldi	r17, 0x00	; 0
     326:	0e 19       	sub	r16, r14
     328:	1f 09       	sbc	r17, r15

	if(val<0) LCDData('-');
     32a:	99 23       	and	r25, r25
     32c:	84 f4       	brge	.+32     	; 0x34e <LCDWriteInt+0xa0>
     32e:	61 e0       	ldi	r22, 0x01	; 1
     330:	8d e2       	ldi	r24, 0x2D	; 45
     332:	38 df       	rcall	.-400    	; 0x1a4 <LCDByte>
     334:	0c c0       	rjmp	.+24     	; 0x34e <LCDWriteInt+0xa0>
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
     336:	e1 e0       	ldi	r30, 0x01	; 1
     338:	f0 e0       	ldi	r31, 0x00	; 0
     33a:	ec 0f       	add	r30, r28
     33c:	fd 1f       	adc	r31, r29
     33e:	e0 0f       	add	r30, r16
     340:	f1 1f       	adc	r31, r17
     342:	80 81       	ld	r24, Z
     344:	61 e0       	ldi	r22, 0x01	; 1
     346:	80 5d       	subi	r24, 0xD0	; 208
     348:	2d df       	rcall	.-422    	; 0x1a4 <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
     34a:	0f 5f       	subi	r16, 0xFF	; 255
     34c:	1f 4f       	sbci	r17, 0xFF	; 255
     34e:	05 30       	cpi	r16, 0x05	; 5
     350:	11 05       	cpc	r17, r1
     352:	8c f3       	brlt	.-30     	; 0x336 <LCDWriteInt+0x88>
	{
	LCDData(48+str[i]);
	}
}
     354:	0f 90       	pop	r0
     356:	0f 90       	pop	r0
     358:	0f 90       	pop	r0
     35a:	0f 90       	pop	r0
     35c:	0f 90       	pop	r0
     35e:	df 91       	pop	r29
     360:	cf 91       	pop	r28
     362:	1f 91       	pop	r17
     364:	0f 91       	pop	r16
     366:	ff 90       	pop	r15
     368:	ef 90       	pop	r14
     36a:	08 95       	ret

0000036c <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 if(x<40)
     36c:	88 32       	cpi	r24, 0x28	; 40
     36e:	28 f4       	brcc	.+10     	; 0x37a <LCDGotoXY+0xe>
 {
  if(y) x|=0b01000000;
     370:	61 11       	cpse	r22, r1
     372:	80 64       	ori	r24, 0x40	; 64
  x|=0b10000000;
  LCDCmd(x);
     374:	60 e0       	ldi	r22, 0x00	; 0
     376:	80 68       	ori	r24, 0x80	; 128
     378:	15 cf       	rjmp	.-470    	; 0x1a4 <LCDByte>
     37a:	08 95       	ret

0000037c <__vector_4>:
	
	/* Last but not least set the tail to NULL */
	*t = NULL;		

	return;
}/*clearQueue*/
     37c:	1f 92       	push	r1
     37e:	0f 92       	push	r0
     380:	0f b6       	in	r0, 0x3f	; 63
     382:	0f 92       	push	r0
     384:	11 24       	eor	r1, r1
     386:	8f 93       	push	r24
     388:	4b 9b       	sbis	0x09, 3	; 9
     38a:	03 c0       	rjmp	.+6      	; 0x392 <__vector_4+0x16>
     38c:	83 e0       	ldi	r24, 0x03	; 3
     38e:	80 93 8c 03 	sts	0x038C, r24	; 0x80038c <STATE>
     392:	8f 91       	pop	r24
     394:	0f 90       	pop	r0
     396:	0f be       	out	0x3f, r0	; 63
     398:	0f 90       	pop	r0
     39a:	1f 90       	pop	r1
     39c:	18 95       	reti

0000039e <__vector_29>:
     39e:	1f 92       	push	r1
     3a0:	0f 92       	push	r0
     3a2:	0f b6       	in	r0, 0x3f	; 63
     3a4:	0f 92       	push	r0
     3a6:	11 24       	eor	r1, r1
     3a8:	0b b6       	in	r0, 0x3b	; 59
     3aa:	0f 92       	push	r0
     3ac:	2f 93       	push	r18
     3ae:	3f 93       	push	r19
     3b0:	8f 93       	push	r24
     3b2:	9f 93       	push	r25
     3b4:	ef 93       	push	r30
     3b6:	ff 93       	push	r31
     3b8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
     3bc:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
     3c0:	90 93 85 03 	sts	0x0385, r25	; 0x800385 <ADC_result+0x1>
     3c4:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <ADC_result>
     3c8:	20 91 84 03 	lds	r18, 0x0384	; 0x800384 <ADC_result>
     3cc:	30 91 85 03 	lds	r19, 0x0385	; 0x800385 <ADC_result+0x1>
     3d0:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <MIN>
     3d4:	90 91 98 03 	lds	r25, 0x0398	; 0x800398 <MIN+0x1>
     3d8:	28 17       	cp	r18, r24
     3da:	39 07       	cpc	r19, r25
     3dc:	40 f4       	brcc	.+16     	; 0x3ee <__vector_29+0x50>
     3de:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <ADC_result>
     3e2:	90 91 85 03 	lds	r25, 0x0385	; 0x800385 <ADC_result+0x1>
     3e6:	90 93 98 03 	sts	0x0398, r25	; 0x800398 <MIN+0x1>
     3ea:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <MIN>
     3ee:	4a 9b       	sbis	0x09, 2	; 9
     3f0:	06 c0       	rjmp	.+12     	; 0x3fe <__vector_29+0x60>
     3f2:	ea e7       	ldi	r30, 0x7A	; 122
     3f4:	f0 e0       	ldi	r31, 0x00	; 0
     3f6:	80 81       	ld	r24, Z
     3f8:	80 64       	ori	r24, 0x40	; 64
     3fa:	80 83       	st	Z, r24
     3fc:	80 c0       	rjmp	.+256    	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
     3fe:	80 91 76 03 	lds	r24, 0x0376	; 0x800376 <COUNT>
     402:	90 91 77 03 	lds	r25, 0x0377	; 0x800377 <COUNT+0x1>
     406:	01 96       	adiw	r24, 0x01	; 1
     408:	90 93 77 03 	sts	0x0377, r25	; 0x800377 <COUNT+0x1>
     40c:	80 93 76 03 	sts	0x0376, r24	; 0x800376 <COUNT>
     410:	20 91 3a 03 	lds	r18, 0x033A	; 0x80033a <WHITE+0x2>
     414:	30 91 3b 03 	lds	r19, 0x033B	; 0x80033b <WHITE+0x3>
     418:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <MIN>
     41c:	90 91 98 03 	lds	r25, 0x0398	; 0x800398 <MIN+0x1>
     420:	82 17       	cp	r24, r18
     422:	93 07       	cpc	r25, r19
     424:	98 f0       	brcs	.+38     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
     426:	20 91 3c 03 	lds	r18, 0x033C	; 0x80033c <WHITE+0x4>
     42a:	30 91 3d 03 	lds	r19, 0x033D	; 0x80033d <WHITE+0x5>
     42e:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <MIN>
     432:	90 91 98 03 	lds	r25, 0x0398	; 0x800398 <MIN+0x1>
     436:	28 17       	cp	r18, r24
     438:	39 07       	cpc	r19, r25
     43a:	40 f0       	brcs	.+16     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
     43c:	e0 91 93 03 	lds	r30, 0x0393	; 0x800393 <newLink>
     440:	f0 91 94 03 	lds	r31, 0x0394	; 0x800394 <newLink+0x1>
     444:	80 91 38 03 	lds	r24, 0x0338	; 0x800338 <WHITE>
     448:	80 83       	st	Z, r24
     44a:	59 c0       	rjmp	.+178    	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
     44c:	20 91 46 03 	lds	r18, 0x0346	; 0x800346 <BLACK+0x2>
     450:	30 91 47 03 	lds	r19, 0x0347	; 0x800347 <BLACK+0x3>
     454:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <MIN>
     458:	90 91 98 03 	lds	r25, 0x0398	; 0x800398 <MIN+0x1>
     45c:	82 17       	cp	r24, r18
     45e:	93 07       	cpc	r25, r19
     460:	98 f0       	brcs	.+38     	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
     462:	20 91 48 03 	lds	r18, 0x0348	; 0x800348 <BLACK+0x4>
     466:	30 91 49 03 	lds	r19, 0x0349	; 0x800349 <BLACK+0x5>
     46a:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <MIN>
     46e:	90 91 98 03 	lds	r25, 0x0398	; 0x800398 <MIN+0x1>
     472:	28 17       	cp	r18, r24
     474:	39 07       	cpc	r19, r25
     476:	40 f0       	brcs	.+16     	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
     478:	e0 91 93 03 	lds	r30, 0x0393	; 0x800393 <newLink>
     47c:	f0 91 94 03 	lds	r31, 0x0394	; 0x800394 <newLink+0x1>
     480:	80 91 44 03 	lds	r24, 0x0344	; 0x800344 <BLACK>
     484:	80 83       	st	Z, r24
     486:	3b c0       	rjmp	.+118    	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
     488:	20 91 34 03 	lds	r18, 0x0334	; 0x800334 <ALUMINUM+0x2>
     48c:	30 91 35 03 	lds	r19, 0x0335	; 0x800335 <ALUMINUM+0x3>
     490:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <MIN>
     494:	90 91 98 03 	lds	r25, 0x0398	; 0x800398 <MIN+0x1>
     498:	82 17       	cp	r24, r18
     49a:	93 07       	cpc	r25, r19
     49c:	98 f0       	brcs	.+38     	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
     49e:	20 91 36 03 	lds	r18, 0x0336	; 0x800336 <ALUMINUM+0x4>
     4a2:	30 91 37 03 	lds	r19, 0x0337	; 0x800337 <ALUMINUM+0x5>
     4a6:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <MIN>
     4aa:	90 91 98 03 	lds	r25, 0x0398	; 0x800398 <MIN+0x1>
     4ae:	28 17       	cp	r18, r24
     4b0:	39 07       	cpc	r19, r25
     4b2:	40 f0       	brcs	.+16     	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
     4b4:	e0 91 93 03 	lds	r30, 0x0393	; 0x800393 <newLink>
     4b8:	f0 91 94 03 	lds	r31, 0x0394	; 0x800394 <newLink+0x1>
     4bc:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <ALUMINUM>
     4c0:	80 83       	st	Z, r24
     4c2:	1d c0       	rjmp	.+58     	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
     4c4:	20 91 40 03 	lds	r18, 0x0340	; 0x800340 <STEEL+0x2>
     4c8:	30 91 41 03 	lds	r19, 0x0341	; 0x800341 <STEEL+0x3>
     4cc:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <MIN>
     4d0:	90 91 98 03 	lds	r25, 0x0398	; 0x800398 <MIN+0x1>
     4d4:	82 17       	cp	r24, r18
     4d6:	93 07       	cpc	r25, r19
     4d8:	90 f0       	brcs	.+36     	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
     4da:	20 91 42 03 	lds	r18, 0x0342	; 0x800342 <STEEL+0x4>
     4de:	30 91 43 03 	lds	r19, 0x0343	; 0x800343 <STEEL+0x5>
     4e2:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <MIN>
     4e6:	90 91 98 03 	lds	r25, 0x0398	; 0x800398 <MIN+0x1>
     4ea:	28 17       	cp	r18, r24
     4ec:	39 07       	cpc	r19, r25
     4ee:	38 f0       	brcs	.+14     	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
     4f0:	e0 91 93 03 	lds	r30, 0x0393	; 0x800393 <newLink>
     4f4:	f0 91 94 03 	lds	r31, 0x0394	; 0x800394 <newLink+0x1>
     4f8:	80 91 3e 03 	lds	r24, 0x033E	; 0x80033e <STEEL>
     4fc:	80 83       	st	Z, r24
     4fe:	ff 91       	pop	r31
     500:	ef 91       	pop	r30
     502:	9f 91       	pop	r25
     504:	8f 91       	pop	r24
     506:	3f 91       	pop	r19
     508:	2f 91       	pop	r18
     50a:	0f 90       	pop	r0
     50c:	0b be       	out	0x3b, r0	; 59
     50e:	0f 90       	pop	r0
     510:	0f be       	out	0x3f, r0	; 63
     512:	0f 90       	pop	r0
     514:	1f 90       	pop	r1
     516:	18 95       	reti

00000518 <__vector_33>:
     518:	1f 92       	push	r1
     51a:	0f 92       	push	r0
     51c:	0f b6       	in	r0, 0x3f	; 63
     51e:	0f 92       	push	r0
     520:	11 24       	eor	r1, r1
     522:	8f 93       	push	r24
     524:	9f 93       	push	r25
     526:	81 e0       	ldi	r24, 0x01	; 1
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	90 93 75 03 	sts	0x0375, r25	; 0x800375 <__data_end+0x1>
     52e:	80 93 74 03 	sts	0x0374, r24	; 0x800374 <__data_end>
     532:	9f 91       	pop	r25
     534:	8f 91       	pop	r24
     536:	0f 90       	pop	r0
     538:	0f be       	out	0x3f, r0	; 63
     53a:	0f 90       	pop	r0
     53c:	1f 90       	pop	r1
     53e:	18 95       	reti

00000540 <INTsetup>:
     540:	8d b3       	in	r24, 0x1d	; 29
     542:	8f 60       	ori	r24, 0x0F	; 15
     544:	8d bb       	out	0x1d, r24	; 29
     546:	e9 e6       	ldi	r30, 0x69	; 105
     548:	f0 e0       	ldi	r31, 0x00	; 0
     54a:	80 81       	ld	r24, Z
     54c:	83 60       	ori	r24, 0x03	; 3
     54e:	80 83       	st	Z, r24
     550:	80 81       	ld	r24, Z
     552:	88 60       	ori	r24, 0x08	; 8
     554:	80 83       	st	Z, r24
     556:	80 81       	ld	r24, Z
     558:	80 63       	ori	r24, 0x30	; 48
     55a:	80 83       	st	Z, r24
     55c:	80 81       	ld	r24, Z
     55e:	80 6c       	ori	r24, 0xC0	; 192
     560:	80 83       	st	Z, r24
     562:	8c b3       	in	r24, 0x1c	; 28
     564:	84 60       	ori	r24, 0x04	; 4
     566:	8c bb       	out	0x1c, r24	; 28
     568:	08 95       	ret

0000056a <PWMsetup>:
     56a:	84 b5       	in	r24, 0x24	; 36
     56c:	83 60       	ori	r24, 0x03	; 3
     56e:	84 bd       	out	0x24, r24	; 36
     570:	84 b5       	in	r24, 0x24	; 36
     572:	80 68       	ori	r24, 0x80	; 128
     574:	84 bd       	out	0x24, r24	; 36
     576:	85 b5       	in	r24, 0x25	; 37
     578:	82 60       	ori	r24, 0x02	; 2
     57a:	85 bd       	out	0x25, r24	; 37
     57c:	80 e9       	ldi	r24, 0x90	; 144
     57e:	87 bd       	out	0x27, r24	; 39
     580:	08 95       	ret

00000582 <ADCsetup>:
     582:	ea e7       	ldi	r30, 0x7A	; 122
     584:	f0 e0       	ldi	r31, 0x00	; 0
     586:	80 81       	ld	r24, Z
     588:	80 68       	ori	r24, 0x80	; 128
     58a:	80 83       	st	Z, r24
     58c:	80 81       	ld	r24, Z
     58e:	88 60       	ori	r24, 0x08	; 8
     590:	80 83       	st	Z, r24
     592:	ac e7       	ldi	r26, 0x7C	; 124
     594:	b0 e0       	ldi	r27, 0x00	; 0
     596:	8c 91       	ld	r24, X
     598:	80 64       	ori	r24, 0x40	; 64
     59a:	8c 93       	st	X, r24
     59c:	80 81       	ld	r24, Z
     59e:	87 60       	ori	r24, 0x07	; 7
     5a0:	80 83       	st	Z, r24
     5a2:	08 95       	ret

000005a4 <mTimer>:
     5a4:	e1 e8       	ldi	r30, 0x81	; 129
     5a6:	f0 e0       	ldi	r31, 0x00	; 0
     5a8:	20 81       	ld	r18, Z
     5aa:	28 60       	ori	r18, 0x08	; 8
     5ac:	20 83       	st	Z, r18
     5ae:	28 ee       	ldi	r18, 0xE8	; 232
     5b0:	33 e0       	ldi	r19, 0x03	; 3
     5b2:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
     5b6:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
     5ba:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
     5be:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
     5c2:	26 b3       	in	r18, 0x16	; 22
     5c4:	22 60       	ori	r18, 0x02	; 2
     5c6:	26 bb       	out	0x16, r18	; 22
     5c8:	20 e0       	ldi	r18, 0x00	; 0
     5ca:	30 e0       	ldi	r19, 0x00	; 0
     5cc:	07 c0       	rjmp	.+14     	; 0x5dc <mTimer+0x38>
     5ce:	b1 9b       	sbis	0x16, 1	; 22
     5d0:	05 c0       	rjmp	.+10     	; 0x5dc <mTimer+0x38>
     5d2:	46 b3       	in	r20, 0x16	; 22
     5d4:	42 60       	ori	r20, 0x02	; 2
     5d6:	46 bb       	out	0x16, r20	; 22
     5d8:	2f 5f       	subi	r18, 0xFF	; 255
     5da:	3f 4f       	sbci	r19, 0xFF	; 255
     5dc:	28 17       	cp	r18, r24
     5de:	39 07       	cpc	r19, r25
     5e0:	b4 f3       	brlt	.-20     	; 0x5ce <mTimer+0x2a>
     5e2:	08 95       	ret

000005e4 <__vector_default>:
     5e4:	1f 92       	push	r1
     5e6:	0f 92       	push	r0
     5e8:	0f b6       	in	r0, 0x3f	; 63
     5ea:	0f 92       	push	r0
     5ec:	11 24       	eor	r1, r1
     5ee:	0b b6       	in	r0, 0x3b	; 59
     5f0:	0f 92       	push	r0
     5f2:	2f 93       	push	r18
     5f4:	3f 93       	push	r19
     5f6:	4f 93       	push	r20
     5f8:	5f 93       	push	r21
     5fa:	6f 93       	push	r22
     5fc:	7f 93       	push	r23
     5fe:	8f 93       	push	r24
     600:	9f 93       	push	r25
     602:	af 93       	push	r26
     604:	bf 93       	push	r27
     606:	ef 93       	push	r30
     608:	ff 93       	push	r31
     60a:	60 e0       	ldi	r22, 0x00	; 0
     60c:	81 e0       	ldi	r24, 0x01	; 1
     60e:	ca dd       	rcall	.-1132   	; 0x1a4 <LCDByte>
     610:	60 e0       	ldi	r22, 0x00	; 0
     612:	80 e0       	ldi	r24, 0x00	; 0
     614:	ab de       	rcall	.-682    	; 0x36c <LCDGotoXY>
     616:	8c e4       	ldi	r24, 0x4C	; 76
     618:	93 e0       	ldi	r25, 0x03	; 3
     61a:	3c de       	rcall	.-904    	; 0x294 <LCDWriteString>
     61c:	88 ee       	ldi	r24, 0xE8	; 232
     61e:	93 e0       	ldi	r25, 0x03	; 3
     620:	c1 df       	rcall	.-126    	; 0x5a4 <mTimer>
     622:	ff 91       	pop	r31
     624:	ef 91       	pop	r30
     626:	bf 91       	pop	r27
     628:	af 91       	pop	r26
     62a:	9f 91       	pop	r25
     62c:	8f 91       	pop	r24
     62e:	7f 91       	pop	r23
     630:	6f 91       	pop	r22
     632:	5f 91       	pop	r21
     634:	4f 91       	pop	r20
     636:	3f 91       	pop	r19
     638:	2f 91       	pop	r18
     63a:	0f 90       	pop	r0
     63c:	0b be       	out	0x3b, r0	; 59
     63e:	0f 90       	pop	r0
     640:	0f be       	out	0x3f, r0	; 63
     642:	0f 90       	pop	r0
     644:	1f 90       	pop	r1
     646:	18 95       	reti

00000648 <LCDsetup>:
     648:	83 e0       	ldi	r24, 0x03	; 3
     64a:	e3 dd       	rcall	.-1082   	; 0x212 <InitLCD>
     64c:	60 e0       	ldi	r22, 0x00	; 0
     64e:	81 e0       	ldi	r24, 0x01	; 1
     650:	a9 dd       	rcall	.-1198   	; 0x1a4 <LCDByte>
     652:	60 e0       	ldi	r22, 0x00	; 0
     654:	80 e0       	ldi	r24, 0x00	; 0
     656:	8a de       	rcall	.-748    	; 0x36c <LCDGotoXY>
     658:	84 e5       	ldi	r24, 0x54	; 84
     65a:	93 e0       	ldi	r25, 0x03	; 3
     65c:	1b de       	rcall	.-970    	; 0x294 <LCDWriteString>
     65e:	88 ee       	ldi	r24, 0xE8	; 232
     660:	93 e0       	ldi	r25, 0x03	; 3
     662:	a0 df       	rcall	.-192    	; 0x5a4 <mTimer>
     664:	60 e0       	ldi	r22, 0x00	; 0
     666:	81 e0       	ldi	r24, 0x01	; 1
     668:	9d cd       	rjmp	.-1222   	; 0x1a4 <LCDByte>
     66a:	08 95       	ret

0000066c <rTimer>:
     66c:	e1 e9       	ldi	r30, 0x91	; 145
     66e:	f0 e0       	ldi	r31, 0x00	; 0
     670:	80 81       	ld	r24, Z
     672:	88 60       	ori	r24, 0x08	; 8
     674:	80 83       	st	Z, r24
     676:	80 e0       	ldi	r24, 0x00	; 0
     678:	94 e6       	ldi	r25, 0x64	; 100
     67a:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <__TEXT_REGION_LENGTH__+0x7c009b>
     67e:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7c009a>
     682:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7c0095>
     686:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7c0094>
     68a:	a1 e7       	ldi	r26, 0x71	; 113
     68c:	b0 e0       	ldi	r27, 0x00	; 0
     68e:	8c 91       	ld	r24, X
     690:	84 60       	ori	r24, 0x04	; 4
     692:	8c 93       	st	X, r24
     694:	8c 91       	ld	r24, X
     696:	84 60       	ori	r24, 0x04	; 4
     698:	8c 93       	st	X, r24
     69a:	80 81       	ld	r24, Z
     69c:	85 60       	ori	r24, 0x05	; 5
     69e:	80 83       	st	Z, r24
     6a0:	08 95       	ret

000006a2 <__vector_1>:
     6a2:	1f 92       	push	r1
     6a4:	0f 92       	push	r0
     6a6:	0f b6       	in	r0, 0x3f	; 63
     6a8:	0f 92       	push	r0
     6aa:	11 24       	eor	r1, r1
     6ac:	0b b6       	in	r0, 0x3b	; 59
     6ae:	0f 92       	push	r0
     6b0:	2f 93       	push	r18
     6b2:	3f 93       	push	r19
     6b4:	4f 93       	push	r20
     6b6:	5f 93       	push	r21
     6b8:	6f 93       	push	r22
     6ba:	7f 93       	push	r23
     6bc:	8f 93       	push	r24
     6be:	9f 93       	push	r25
     6c0:	af 93       	push	r26
     6c2:	bf 93       	push	r27
     6c4:	ef 93       	push	r30
     6c6:	ff 93       	push	r31
     6c8:	84 e1       	ldi	r24, 0x14	; 20
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	6b df       	rcall	.-298    	; 0x5a4 <mTimer>
     6ce:	48 9b       	sbis	0x09, 0	; 9
     6d0:	03 c0       	rjmp	.+6      	; 0x6d8 <__vector_1+0x36>
     6d2:	84 ec       	ldi	r24, 0xC4	; 196
     6d4:	99 e0       	ldi	r25, 0x09	; 9
     6d6:	ca df       	rcall	.-108    	; 0x66c <rTimer>
     6d8:	48 9b       	sbis	0x09, 0	; 9
     6da:	fe cf       	rjmp	.-4      	; 0x6d8 <__vector_1+0x36>
     6dc:	84 e1       	ldi	r24, 0x14	; 20
     6de:	90 e0       	ldi	r25, 0x00	; 0
     6e0:	61 df       	rcall	.-318    	; 0x5a4 <mTimer>
     6e2:	ff 91       	pop	r31
     6e4:	ef 91       	pop	r30
     6e6:	bf 91       	pop	r27
     6e8:	af 91       	pop	r26
     6ea:	9f 91       	pop	r25
     6ec:	8f 91       	pop	r24
     6ee:	7f 91       	pop	r23
     6f0:	6f 91       	pop	r22
     6f2:	5f 91       	pop	r21
     6f4:	4f 91       	pop	r20
     6f6:	3f 91       	pop	r19
     6f8:	2f 91       	pop	r18
     6fa:	0f 90       	pop	r0
     6fc:	0b be       	out	0x3b, r0	; 59
     6fe:	0f 90       	pop	r0
     700:	0f be       	out	0x3f, r0	; 63
     702:	0f 90       	pop	r0
     704:	1f 90       	pop	r1
     706:	18 95       	reti

00000708 <setup>:
     708:	fc 01       	movw	r30, r24
     70a:	11 82       	std	Z+1, r1	; 0x01
     70c:	10 82       	st	Z, r1
     70e:	fb 01       	movw	r30, r22
     710:	11 82       	std	Z+1, r1	; 0x01
     712:	10 82       	st	Z, r1
     714:	08 95       	ret

00000716 <initLink>:
     716:	cf 93       	push	r28
     718:	df 93       	push	r29
     71a:	ec 01       	movw	r28, r24
     71c:	84 e0       	ldi	r24, 0x04	; 4
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	28 d4       	rcall	.+2128   	; 0xf72 <malloc>
     722:	99 83       	std	Y+1, r25	; 0x01
     724:	88 83       	st	Y, r24
     726:	fc 01       	movw	r30, r24
     728:	13 82       	std	Z+3, r1	; 0x03
     72a:	12 82       	std	Z+2, r1	; 0x02
     72c:	df 91       	pop	r29
     72e:	cf 91       	pop	r28
     730:	08 95       	ret

00000732 <enqueue>:
     732:	db 01       	movw	r26, r22
     734:	ed 91       	ld	r30, X+
     736:	fc 91       	ld	r31, X
     738:	30 97       	sbiw	r30, 0x00	; 0
     73a:	61 f0       	breq	.+24     	; 0x754 <enqueue+0x22>
     73c:	da 01       	movw	r26, r20
     73e:	8d 91       	ld	r24, X+
     740:	9c 91       	ld	r25, X
     742:	11 97       	sbiw	r26, 0x01	; 1
     744:	93 83       	std	Z+3, r25	; 0x03
     746:	82 83       	std	Z+2, r24	; 0x02
     748:	8d 91       	ld	r24, X+
     74a:	9c 91       	ld	r25, X
     74c:	fb 01       	movw	r30, r22
     74e:	91 83       	std	Z+1, r25	; 0x01
     750:	80 83       	st	Z, r24
     752:	08 95       	ret
     754:	da 01       	movw	r26, r20
     756:	2d 91       	ld	r18, X+
     758:	3c 91       	ld	r19, X
     75a:	11 97       	sbiw	r26, 0x01	; 1
     75c:	fc 01       	movw	r30, r24
     75e:	31 83       	std	Z+1, r19	; 0x01
     760:	20 83       	st	Z, r18
     762:	8d 91       	ld	r24, X+
     764:	9c 91       	ld	r25, X
     766:	db 01       	movw	r26, r22
     768:	8d 93       	st	X+, r24
     76a:	9c 93       	st	X, r25
     76c:	08 95       	ret

0000076e <__vector_3>:
     76e:	1f 92       	push	r1
     770:	0f 92       	push	r0
     772:	0f b6       	in	r0, 0x3f	; 63
     774:	0f 92       	push	r0
     776:	11 24       	eor	r1, r1
     778:	0b b6       	in	r0, 0x3b	; 59
     77a:	0f 92       	push	r0
     77c:	2f 93       	push	r18
     77e:	3f 93       	push	r19
     780:	4f 93       	push	r20
     782:	5f 93       	push	r21
     784:	6f 93       	push	r22
     786:	7f 93       	push	r23
     788:	8f 93       	push	r24
     78a:	9f 93       	push	r25
     78c:	af 93       	push	r26
     78e:	bf 93       	push	r27
     790:	ef 93       	push	r30
     792:	ff 93       	push	r31
     794:	4a 9b       	sbis	0x09, 2	; 9
     796:	15 c0       	rjmp	.+42     	; 0x7c2 <__vector_3+0x54>
     798:	8f ef       	ldi	r24, 0xFF	; 255
     79a:	93 e0       	ldi	r25, 0x03	; 3
     79c:	90 93 98 03 	sts	0x0398, r25	; 0x800398 <MIN+0x1>
     7a0:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <MIN>
     7a4:	83 e9       	ldi	r24, 0x93	; 147
     7a6:	93 e0       	ldi	r25, 0x03	; 3
     7a8:	b6 df       	rcall	.-148    	; 0x716 <initLink>
     7aa:	43 e9       	ldi	r20, 0x93	; 147
     7ac:	53 e0       	ldi	r21, 0x03	; 3
     7ae:	68 e8       	ldi	r22, 0x88	; 136
     7b0:	73 e0       	ldi	r23, 0x03	; 3
     7b2:	8a e8       	ldi	r24, 0x8A	; 138
     7b4:	93 e0       	ldi	r25, 0x03	; 3
     7b6:	bd df       	rcall	.-134    	; 0x732 <enqueue>
     7b8:	ea e7       	ldi	r30, 0x7A	; 122
     7ba:	f0 e0       	ldi	r31, 0x00	; 0
     7bc:	80 81       	ld	r24, Z
     7be:	80 64       	ori	r24, 0x40	; 64
     7c0:	80 83       	st	Z, r24
     7c2:	ff 91       	pop	r31
     7c4:	ef 91       	pop	r30
     7c6:	bf 91       	pop	r27
     7c8:	af 91       	pop	r26
     7ca:	9f 91       	pop	r25
     7cc:	8f 91       	pop	r24
     7ce:	7f 91       	pop	r23
     7d0:	6f 91       	pop	r22
     7d2:	5f 91       	pop	r21
     7d4:	4f 91       	pop	r20
     7d6:	3f 91       	pop	r19
     7d8:	2f 91       	pop	r18
     7da:	0f 90       	pop	r0
     7dc:	0b be       	out	0x3b, r0	; 59
     7de:	0f 90       	pop	r0
     7e0:	0f be       	out	0x3f, r0	; 63
     7e2:	0f 90       	pop	r0
     7e4:	1f 90       	pop	r1
     7e6:	18 95       	reti

000007e8 <dequeue>:
     7e8:	fc 01       	movw	r30, r24
     7ea:	80 81       	ld	r24, Z
     7ec:	91 81       	ldd	r25, Z+1	; 0x01
     7ee:	da 01       	movw	r26, r20
     7f0:	8d 93       	st	X+, r24
     7f2:	9c 93       	st	X, r25
     7f4:	a0 81       	ld	r26, Z
     7f6:	b1 81       	ldd	r27, Z+1	; 0x01
     7f8:	10 97       	sbiw	r26, 0x00	; 0
     7fa:	31 f0       	breq	.+12     	; 0x808 <dequeue+0x20>
     7fc:	12 96       	adiw	r26, 0x02	; 2
     7fe:	8d 91       	ld	r24, X+
     800:	9c 91       	ld	r25, X
     802:	13 97       	sbiw	r26, 0x03	; 3
     804:	91 83       	std	Z+1, r25	; 0x01
     806:	80 83       	st	Z, r24
     808:	80 81       	ld	r24, Z
     80a:	91 81       	ldd	r25, Z+1	; 0x01
     80c:	89 2b       	or	r24, r25
     80e:	19 f4       	brne	.+6      	; 0x816 <dequeue+0x2e>
     810:	fb 01       	movw	r30, r22
     812:	11 82       	std	Z+1, r1	; 0x01
     814:	10 82       	st	Z, r1
     816:	08 95       	ret

00000818 <isEmpty>:
* RETURNS: 1:if the queue is empty, and 0:if the queue is NOT empty
*/
/* Check to see if the queue is empty */
char isEmpty(link **h){
	/* ENTER YOUR CODE HERE */
	return(*h == NULL);
     818:	fc 01       	movw	r30, r24
     81a:	20 81       	ld	r18, Z
     81c:	31 81       	ldd	r19, Z+1	; 0x01
     81e:	81 e0       	ldi	r24, 0x01	; 1
     820:	23 2b       	or	r18, r19
     822:	09 f0       	breq	.+2      	; 0x826 <isEmpty+0xe>
     824:	80 e0       	ldi	r24, 0x00	; 0
}/*isEmpty*/
     826:	08 95       	ret

00000828 <size>:
	link 	*temp;			/* will store the link while traversing the queue */
	int 	numElements;

	numElements = 0;

	temp = *h;			/* point to the first item in the list */
     828:	dc 01       	movw	r26, r24
     82a:	ed 91       	ld	r30, X+
     82c:	fc 91       	ld	r31, X
int size(link **h, link **t){

	link 	*temp;			/* will store the link while traversing the queue */
	int 	numElements;

	numElements = 0;
     82e:	80 e0       	ldi	r24, 0x00	; 0
     830:	90 e0       	ldi	r25, 0x00	; 0

	temp = *h;			/* point to the first item in the list */

	while(temp != NULL){
     832:	04 c0       	rjmp	.+8      	; 0x83c <size+0x14>
		numElements++;
     834:	01 96       	adiw	r24, 0x01	; 1
		temp = temp->next;
     836:	02 80       	ldd	r0, Z+2	; 0x02
     838:	f3 81       	ldd	r31, Z+3	; 0x03
     83a:	e0 2d       	mov	r30, r0

	numElements = 0;

	temp = *h;			/* point to the first item in the list */

	while(temp != NULL){
     83c:	30 97       	sbiw	r30, 0x00	; 0
     83e:	d1 f7       	brne	.-12     	; 0x834 <size+0xc>
		numElements++;
		temp = temp->next;
	}/*while*/
	
	return(numElements);
}/*size*/
     840:	08 95       	ret

00000842 <clockwise>:

/**************************************************************************************
* DESC: Commands the clockwise rotation of the motor, based on the number of steps, the CUR_pos global variable, and mTimer.
* INPUT: The number of steps to run 
*/
void clockwise (int steps){
     842:	0f 93       	push	r16
     844:	1f 93       	push	r17
     846:	cf 93       	push	r28
     848:	df 93       	push	r29
     84a:	8c 01       	movw	r16, r24
	int i;
	if (steps == 50) {
     84c:	82 33       	cpi	r24, 0x32	; 50
     84e:	91 05       	cpc	r25, r1
     850:	09 f0       	breq	.+2      	; 0x854 <clockwise+0x12>
     852:	59 c0       	rjmp	.+178    	; 0x906 <clockwise+0xc4>
     854:	51 c0       	rjmp	.+162    	; 0x8f8 <clockwise+0xb6>
		for (i=0; i<steps; i++){
			switch(CUR_pos){
     856:	80 91 82 03 	lds	r24, 0x0382	; 0x800382 <CUR_pos>
     85a:	90 91 83 03 	lds	r25, 0x0383	; 0x800383 <CUR_pos+0x1>
     85e:	81 30       	cpi	r24, 0x01	; 1
     860:	91 05       	cpc	r25, r1
     862:	c1 f0       	breq	.+48     	; 0x894 <clockwise+0x52>
     864:	30 f0       	brcs	.+12     	; 0x872 <clockwise+0x30>
     866:	82 30       	cpi	r24, 0x02	; 2
     868:	91 05       	cpc	r25, r1
     86a:	29 f1       	breq	.+74     	; 0x8b6 <clockwise+0x74>
     86c:	03 97       	sbiw	r24, 0x03	; 3
     86e:	a1 f1       	breq	.+104    	; 0x8d8 <clockwise+0x96>
     870:	41 c0       	rjmp	.+130    	; 0x8f4 <clockwise+0xb2>
				case (0):
				PORTA = step2;
     872:	8b e2       	ldi	r24, 0x2B	; 43
     874:	82 b9       	out	0x02, r24	; 2
				CUR_pos = 1;
     876:	81 e0       	ldi	r24, 0x01	; 1
     878:	90 e0       	ldi	r25, 0x00	; 0
     87a:	90 93 83 03 	sts	0x0383, r25	; 0x800383 <CUR_pos+0x1>
     87e:	80 93 82 03 	sts	0x0382, r24	; 0x800382 <CUR_pos>
				mTimer(ACCEL90[i]);
     882:	fe 01       	movw	r30, r28
     884:	ee 0f       	add	r30, r30
     886:	ff 1f       	adc	r31, r31
     888:	e2 53       	subi	r30, 0x32	; 50
     88a:	fd 4f       	sbci	r31, 0xFD	; 253
     88c:	80 81       	ld	r24, Z
     88e:	91 81       	ldd	r25, Z+1	; 0x01
     890:	89 de       	rcall	.-750    	; 0x5a4 <mTimer>
				break;
     892:	30 c0       	rjmp	.+96     	; 0x8f4 <clockwise+0xb2>
				case (1):
				PORTA = step3;
     894:	8b e1       	ldi	r24, 0x1B	; 27
     896:	82 b9       	out	0x02, r24	; 2
				CUR_pos = 2;
     898:	82 e0       	ldi	r24, 0x02	; 2
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	90 93 83 03 	sts	0x0383, r25	; 0x800383 <CUR_pos+0x1>
     8a0:	80 93 82 03 	sts	0x0382, r24	; 0x800382 <CUR_pos>
				mTimer(ACCEL90[i]);
     8a4:	fe 01       	movw	r30, r28
     8a6:	ee 0f       	add	r30, r30
     8a8:	ff 1f       	adc	r31, r31
     8aa:	e2 53       	subi	r30, 0x32	; 50
     8ac:	fd 4f       	sbci	r31, 0xFD	; 253
     8ae:	80 81       	ld	r24, Z
     8b0:	91 81       	ldd	r25, Z+1	; 0x01
     8b2:	78 de       	rcall	.-784    	; 0x5a4 <mTimer>
				break;
     8b4:	1f c0       	rjmp	.+62     	; 0x8f4 <clockwise+0xb2>
				case (2):
				PORTA = step4;
     8b6:	8d e1       	ldi	r24, 0x1D	; 29
     8b8:	82 b9       	out	0x02, r24	; 2
				CUR_pos = 3;
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	90 e0       	ldi	r25, 0x00	; 0
     8be:	90 93 83 03 	sts	0x0383, r25	; 0x800383 <CUR_pos+0x1>
     8c2:	80 93 82 03 	sts	0x0382, r24	; 0x800382 <CUR_pos>
				mTimer(ACCEL90[i]);
     8c6:	fe 01       	movw	r30, r28
     8c8:	ee 0f       	add	r30, r30
     8ca:	ff 1f       	adc	r31, r31
     8cc:	e2 53       	subi	r30, 0x32	; 50
     8ce:	fd 4f       	sbci	r31, 0xFD	; 253
     8d0:	80 81       	ld	r24, Z
     8d2:	91 81       	ldd	r25, Z+1	; 0x01
     8d4:	67 de       	rcall	.-818    	; 0x5a4 <mTimer>
				break;
     8d6:	0e c0       	rjmp	.+28     	; 0x8f4 <clockwise+0xb2>
				case (3):
				PORTA = step1;
     8d8:	8d e2       	ldi	r24, 0x2D	; 45
     8da:	82 b9       	out	0x02, r24	; 2
				CUR_pos = 0;
     8dc:	10 92 83 03 	sts	0x0383, r1	; 0x800383 <CUR_pos+0x1>
     8e0:	10 92 82 03 	sts	0x0382, r1	; 0x800382 <CUR_pos>
				mTimer(ACCEL90[i]);
     8e4:	fe 01       	movw	r30, r28
     8e6:	ee 0f       	add	r30, r30
     8e8:	ff 1f       	adc	r31, r31
     8ea:	e2 53       	subi	r30, 0x32	; 50
     8ec:	fd 4f       	sbci	r31, 0xFD	; 253
     8ee:	80 81       	ld	r24, Z
     8f0:	91 81       	ldd	r25, Z+1	; 0x01
     8f2:	58 de       	rcall	.-848    	; 0x5a4 <mTimer>
* INPUT: The number of steps to run 
*/
void clockwise (int steps){
	int i;
	if (steps == 50) {
		for (i=0; i<steps; i++){
     8f4:	21 96       	adiw	r28, 0x01	; 1
     8f6:	02 c0       	rjmp	.+4      	; 0x8fc <clockwise+0xba>
     8f8:	c0 e0       	ldi	r28, 0x00	; 0
     8fa:	d0 e0       	ldi	r29, 0x00	; 0
     8fc:	c0 17       	cp	r28, r16
     8fe:	d1 07       	cpc	r29, r17
     900:	0c f4       	brge	.+2      	; 0x904 <clockwise+0xc2>
     902:	a9 cf       	rjmp	.-174    	; 0x856 <clockwise+0x14>
     904:	5c c0       	rjmp	.+184    	; 0x9be <clockwise+0x17c>
				default:
				break;
			}
		}
			
	} else if (steps == 100) {
     906:	84 36       	cpi	r24, 0x64	; 100
     908:	91 05       	cpc	r25, r1
     90a:	09 f0       	breq	.+2      	; 0x90e <clockwise+0xcc>
     90c:	58 c0       	rjmp	.+176    	; 0x9be <clockwise+0x17c>
     90e:	51 c0       	rjmp	.+162    	; 0x9b2 <clockwise+0x170>
		for (i=0; i<steps; i++){
			switch(CUR_pos){
     910:	80 91 82 03 	lds	r24, 0x0382	; 0x800382 <CUR_pos>
     914:	90 91 83 03 	lds	r25, 0x0383	; 0x800383 <CUR_pos+0x1>
     918:	81 30       	cpi	r24, 0x01	; 1
     91a:	91 05       	cpc	r25, r1
     91c:	c1 f0       	breq	.+48     	; 0x94e <clockwise+0x10c>
     91e:	30 f0       	brcs	.+12     	; 0x92c <clockwise+0xea>
     920:	82 30       	cpi	r24, 0x02	; 2
     922:	91 05       	cpc	r25, r1
     924:	29 f1       	breq	.+74     	; 0x970 <clockwise+0x12e>
     926:	03 97       	sbiw	r24, 0x03	; 3
     928:	a1 f1       	breq	.+104    	; 0x992 <clockwise+0x150>
     92a:	41 c0       	rjmp	.+130    	; 0x9ae <clockwise+0x16c>
				case (0):
				PORTA = step2;
     92c:	8b e2       	ldi	r24, 0x2B	; 43
     92e:	82 b9       	out	0x02, r24	; 2
				CUR_pos = 1;
     930:	81 e0       	ldi	r24, 0x01	; 1
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	90 93 83 03 	sts	0x0383, r25	; 0x800383 <CUR_pos+0x1>
     938:	80 93 82 03 	sts	0x0382, r24	; 0x800382 <CUR_pos>
				mTimer(ACCEL180[i]);
     93c:	fe 01       	movw	r30, r28
     93e:	ee 0f       	add	r30, r30
     940:	ff 1f       	adc	r31, r31
     942:	ea 5f       	subi	r30, 0xFA	; 250
     944:	fd 4f       	sbci	r31, 0xFD	; 253
     946:	80 81       	ld	r24, Z
     948:	91 81       	ldd	r25, Z+1	; 0x01
     94a:	2c de       	rcall	.-936    	; 0x5a4 <mTimer>
				break;
     94c:	30 c0       	rjmp	.+96     	; 0x9ae <clockwise+0x16c>
				case (1):
				PORTA = step3;
     94e:	8b e1       	ldi	r24, 0x1B	; 27
     950:	82 b9       	out	0x02, r24	; 2
				CUR_pos = 2;
     952:	82 e0       	ldi	r24, 0x02	; 2
     954:	90 e0       	ldi	r25, 0x00	; 0
     956:	90 93 83 03 	sts	0x0383, r25	; 0x800383 <CUR_pos+0x1>
     95a:	80 93 82 03 	sts	0x0382, r24	; 0x800382 <CUR_pos>
				mTimer(ACCEL180[i]);
     95e:	fe 01       	movw	r30, r28
     960:	ee 0f       	add	r30, r30
     962:	ff 1f       	adc	r31, r31
     964:	ea 5f       	subi	r30, 0xFA	; 250
     966:	fd 4f       	sbci	r31, 0xFD	; 253
     968:	80 81       	ld	r24, Z
     96a:	91 81       	ldd	r25, Z+1	; 0x01
     96c:	1b de       	rcall	.-970    	; 0x5a4 <mTimer>
				break;
     96e:	1f c0       	rjmp	.+62     	; 0x9ae <clockwise+0x16c>
				case (2):
				PORTA = step4;
     970:	8d e1       	ldi	r24, 0x1D	; 29
     972:	82 b9       	out	0x02, r24	; 2
				CUR_pos = 3;
     974:	83 e0       	ldi	r24, 0x03	; 3
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	90 93 83 03 	sts	0x0383, r25	; 0x800383 <CUR_pos+0x1>
     97c:	80 93 82 03 	sts	0x0382, r24	; 0x800382 <CUR_pos>
				mTimer(ACCEL180[i]);
     980:	fe 01       	movw	r30, r28
     982:	ee 0f       	add	r30, r30
     984:	ff 1f       	adc	r31, r31
     986:	ea 5f       	subi	r30, 0xFA	; 250
     988:	fd 4f       	sbci	r31, 0xFD	; 253
     98a:	80 81       	ld	r24, Z
     98c:	91 81       	ldd	r25, Z+1	; 0x01
     98e:	0a de       	rcall	.-1004   	; 0x5a4 <mTimer>
				break;
     990:	0e c0       	rjmp	.+28     	; 0x9ae <clockwise+0x16c>
				case (3):
				PORTA = step1;
     992:	8d e2       	ldi	r24, 0x2D	; 45
     994:	82 b9       	out	0x02, r24	; 2
				CUR_pos = 0;
     996:	10 92 83 03 	sts	0x0383, r1	; 0x800383 <CUR_pos+0x1>
     99a:	10 92 82 03 	sts	0x0382, r1	; 0x800382 <CUR_pos>
				mTimer(ACCEL180[i]);
     99e:	fe 01       	movw	r30, r28
     9a0:	ee 0f       	add	r30, r30
     9a2:	ff 1f       	adc	r31, r31
     9a4:	ea 5f       	subi	r30, 0xFA	; 250
     9a6:	fd 4f       	sbci	r31, 0xFD	; 253
     9a8:	80 81       	ld	r24, Z
     9aa:	91 81       	ldd	r25, Z+1	; 0x01
     9ac:	fb dd       	rcall	.-1034   	; 0x5a4 <mTimer>
				break;
			}
		}
			
	} else if (steps == 100) {
		for (i=0; i<steps; i++){
     9ae:	21 96       	adiw	r28, 0x01	; 1
     9b0:	02 c0       	rjmp	.+4      	; 0x9b6 <clockwise+0x174>
     9b2:	c0 e0       	ldi	r28, 0x00	; 0
     9b4:	d0 e0       	ldi	r29, 0x00	; 0
     9b6:	c0 17       	cp	r28, r16
     9b8:	d1 07       	cpc	r29, r17
     9ba:	0c f4       	brge	.+2      	; 0x9be <clockwise+0x17c>
     9bc:	a9 cf       	rjmp	.-174    	; 0x910 <clockwise+0xce>
		} else if (i>steps-6){
			delay = delay+2;
		}
		*/

}
     9be:	df 91       	pop	r29
     9c0:	cf 91       	pop	r28
     9c2:	1f 91       	pop	r17
     9c4:	0f 91       	pop	r16
     9c6:	08 95       	ret

000009c8 <counterClockwise>:

/**************************************************************************************
* DESC: Commands the counter clockwise rotation of the motor, based on the number of steps, the CUR_pos global variable, and mTimer.
* INPUT: The number of steps to run 
*/
void counterClockwise (int steps){
     9c8:	0f 93       	push	r16
     9ca:	1f 93       	push	r17
     9cc:	cf 93       	push	r28
     9ce:	df 93       	push	r29
     9d0:	8c 01       	movw	r16, r24
	int i;
	if (steps == 50) {
     9d2:	82 33       	cpi	r24, 0x32	; 50
     9d4:	91 05       	cpc	r25, r1
     9d6:	09 f0       	breq	.+2      	; 0x9da <counterClockwise+0x12>
     9d8:	59 c0       	rjmp	.+178    	; 0xa8c <counterClockwise+0xc4>
     9da:	51 c0       	rjmp	.+162    	; 0xa7e <counterClockwise+0xb6>
		for (i=0; i<steps; i++){
			switch(CUR_pos){
     9dc:	80 91 82 03 	lds	r24, 0x0382	; 0x800382 <CUR_pos>
     9e0:	90 91 83 03 	lds	r25, 0x0383	; 0x800383 <CUR_pos+0x1>
     9e4:	81 30       	cpi	r24, 0x01	; 1
     9e6:	91 05       	cpc	r25, r1
     9e8:	c1 f0       	breq	.+48     	; 0xa1a <counterClockwise+0x52>
     9ea:	30 f0       	brcs	.+12     	; 0x9f8 <counterClockwise+0x30>
     9ec:	82 30       	cpi	r24, 0x02	; 2
     9ee:	91 05       	cpc	r25, r1
     9f0:	19 f1       	breq	.+70     	; 0xa38 <counterClockwise+0x70>
     9f2:	03 97       	sbiw	r24, 0x03	; 3
     9f4:	91 f1       	breq	.+100    	; 0xa5a <counterClockwise+0x92>
     9f6:	41 c0       	rjmp	.+130    	; 0xa7a <counterClockwise+0xb2>
				case (0):
				PORTA = step4;
     9f8:	8d e1       	ldi	r24, 0x1D	; 29
     9fa:	82 b9       	out	0x02, r24	; 2
				CUR_pos = 3;
     9fc:	83 e0       	ldi	r24, 0x03	; 3
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	90 93 83 03 	sts	0x0383, r25	; 0x800383 <CUR_pos+0x1>
     a04:	80 93 82 03 	sts	0x0382, r24	; 0x800382 <CUR_pos>
				mTimer(ACCEL90[i]);
     a08:	fe 01       	movw	r30, r28
     a0a:	ee 0f       	add	r30, r30
     a0c:	ff 1f       	adc	r31, r31
     a0e:	e2 53       	subi	r30, 0x32	; 50
     a10:	fd 4f       	sbci	r31, 0xFD	; 253
     a12:	80 81       	ld	r24, Z
     a14:	91 81       	ldd	r25, Z+1	; 0x01
     a16:	c6 dd       	rcall	.-1140   	; 0x5a4 <mTimer>
				break;
     a18:	30 c0       	rjmp	.+96     	; 0xa7a <counterClockwise+0xb2>
				case (1):
				PORTA = step1;
     a1a:	8d e2       	ldi	r24, 0x2D	; 45
     a1c:	82 b9       	out	0x02, r24	; 2
				CUR_pos = 0;
     a1e:	10 92 83 03 	sts	0x0383, r1	; 0x800383 <CUR_pos+0x1>
     a22:	10 92 82 03 	sts	0x0382, r1	; 0x800382 <CUR_pos>
				mTimer(ACCEL90[i]);
     a26:	fe 01       	movw	r30, r28
     a28:	ee 0f       	add	r30, r30
     a2a:	ff 1f       	adc	r31, r31
     a2c:	e2 53       	subi	r30, 0x32	; 50
     a2e:	fd 4f       	sbci	r31, 0xFD	; 253
     a30:	80 81       	ld	r24, Z
     a32:	91 81       	ldd	r25, Z+1	; 0x01
     a34:	b7 dd       	rcall	.-1170   	; 0x5a4 <mTimer>
				break;
     a36:	21 c0       	rjmp	.+66     	; 0xa7a <counterClockwise+0xb2>
				case (2):
				PORTA = step2;
     a38:	8b e2       	ldi	r24, 0x2B	; 43
     a3a:	82 b9       	out	0x02, r24	; 2
				CUR_pos = 1;
     a3c:	81 e0       	ldi	r24, 0x01	; 1
     a3e:	90 e0       	ldi	r25, 0x00	; 0
     a40:	90 93 83 03 	sts	0x0383, r25	; 0x800383 <CUR_pos+0x1>
     a44:	80 93 82 03 	sts	0x0382, r24	; 0x800382 <CUR_pos>
				mTimer(ACCEL90[i]);
     a48:	fe 01       	movw	r30, r28
     a4a:	ee 0f       	add	r30, r30
     a4c:	ff 1f       	adc	r31, r31
     a4e:	e2 53       	subi	r30, 0x32	; 50
     a50:	fd 4f       	sbci	r31, 0xFD	; 253
     a52:	80 81       	ld	r24, Z
     a54:	91 81       	ldd	r25, Z+1	; 0x01
     a56:	a6 dd       	rcall	.-1204   	; 0x5a4 <mTimer>
				break;
     a58:	10 c0       	rjmp	.+32     	; 0xa7a <counterClockwise+0xb2>
				case (3):
				PORTA = step3;
     a5a:	8b e1       	ldi	r24, 0x1B	; 27
     a5c:	82 b9       	out	0x02, r24	; 2
				CUR_pos = 2;
     a5e:	82 e0       	ldi	r24, 0x02	; 2
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	90 93 83 03 	sts	0x0383, r25	; 0x800383 <CUR_pos+0x1>
     a66:	80 93 82 03 	sts	0x0382, r24	; 0x800382 <CUR_pos>
				mTimer(ACCEL90[i]);
     a6a:	fe 01       	movw	r30, r28
     a6c:	ee 0f       	add	r30, r30
     a6e:	ff 1f       	adc	r31, r31
     a70:	e2 53       	subi	r30, 0x32	; 50
     a72:	fd 4f       	sbci	r31, 0xFD	; 253
     a74:	80 81       	ld	r24, Z
     a76:	91 81       	ldd	r25, Z+1	; 0x01
     a78:	95 dd       	rcall	.-1238   	; 0x5a4 <mTimer>
* INPUT: The number of steps to run 
*/
void counterClockwise (int steps){
	int i;
	if (steps == 50) {
		for (i=0; i<steps; i++){
     a7a:	21 96       	adiw	r28, 0x01	; 1
     a7c:	02 c0       	rjmp	.+4      	; 0xa82 <counterClockwise+0xba>
     a7e:	c0 e0       	ldi	r28, 0x00	; 0
     a80:	d0 e0       	ldi	r29, 0x00	; 0
     a82:	c0 17       	cp	r28, r16
     a84:	d1 07       	cpc	r29, r17
     a86:	0c f4       	brge	.+2      	; 0xa8a <counterClockwise+0xc2>
     a88:	a9 cf       	rjmp	.-174    	; 0x9dc <counterClockwise+0x14>
     a8a:	5c c0       	rjmp	.+184    	; 0xb44 <counterClockwise+0x17c>
				break;
				default:
				break;
			}	
		}
	} else if (steps == 100) {
     a8c:	84 36       	cpi	r24, 0x64	; 100
     a8e:	91 05       	cpc	r25, r1
     a90:	09 f0       	breq	.+2      	; 0xa94 <counterClockwise+0xcc>
     a92:	58 c0       	rjmp	.+176    	; 0xb44 <counterClockwise+0x17c>
     a94:	51 c0       	rjmp	.+162    	; 0xb38 <counterClockwise+0x170>
		for (i=0; i<steps; i++){
			switch(CUR_pos){
     a96:	80 91 82 03 	lds	r24, 0x0382	; 0x800382 <CUR_pos>
     a9a:	90 91 83 03 	lds	r25, 0x0383	; 0x800383 <CUR_pos+0x1>
     a9e:	81 30       	cpi	r24, 0x01	; 1
     aa0:	91 05       	cpc	r25, r1
     aa2:	c1 f0       	breq	.+48     	; 0xad4 <counterClockwise+0x10c>
     aa4:	30 f0       	brcs	.+12     	; 0xab2 <counterClockwise+0xea>
     aa6:	82 30       	cpi	r24, 0x02	; 2
     aa8:	91 05       	cpc	r25, r1
     aaa:	19 f1       	breq	.+70     	; 0xaf2 <counterClockwise+0x12a>
     aac:	03 97       	sbiw	r24, 0x03	; 3
     aae:	91 f1       	breq	.+100    	; 0xb14 <counterClockwise+0x14c>
     ab0:	41 c0       	rjmp	.+130    	; 0xb34 <counterClockwise+0x16c>
				case (0):
				PORTA = step4;
     ab2:	8d e1       	ldi	r24, 0x1D	; 29
     ab4:	82 b9       	out	0x02, r24	; 2
				CUR_pos = 3;
     ab6:	83 e0       	ldi	r24, 0x03	; 3
     ab8:	90 e0       	ldi	r25, 0x00	; 0
     aba:	90 93 83 03 	sts	0x0383, r25	; 0x800383 <CUR_pos+0x1>
     abe:	80 93 82 03 	sts	0x0382, r24	; 0x800382 <CUR_pos>
				mTimer(ACCEL180[i]);
     ac2:	fe 01       	movw	r30, r28
     ac4:	ee 0f       	add	r30, r30
     ac6:	ff 1f       	adc	r31, r31
     ac8:	ea 5f       	subi	r30, 0xFA	; 250
     aca:	fd 4f       	sbci	r31, 0xFD	; 253
     acc:	80 81       	ld	r24, Z
     ace:	91 81       	ldd	r25, Z+1	; 0x01
     ad0:	69 dd       	rcall	.-1326   	; 0x5a4 <mTimer>
				break;
     ad2:	30 c0       	rjmp	.+96     	; 0xb34 <counterClockwise+0x16c>
				case (1):
				PORTA = step1;
     ad4:	8d e2       	ldi	r24, 0x2D	; 45
     ad6:	82 b9       	out	0x02, r24	; 2
				CUR_pos = 0;
     ad8:	10 92 83 03 	sts	0x0383, r1	; 0x800383 <CUR_pos+0x1>
     adc:	10 92 82 03 	sts	0x0382, r1	; 0x800382 <CUR_pos>
				mTimer(ACCEL180[i]);
     ae0:	fe 01       	movw	r30, r28
     ae2:	ee 0f       	add	r30, r30
     ae4:	ff 1f       	adc	r31, r31
     ae6:	ea 5f       	subi	r30, 0xFA	; 250
     ae8:	fd 4f       	sbci	r31, 0xFD	; 253
     aea:	80 81       	ld	r24, Z
     aec:	91 81       	ldd	r25, Z+1	; 0x01
     aee:	5a dd       	rcall	.-1356   	; 0x5a4 <mTimer>
				break;
     af0:	21 c0       	rjmp	.+66     	; 0xb34 <counterClockwise+0x16c>
				case (2):
				PORTA = step2;
     af2:	8b e2       	ldi	r24, 0x2B	; 43
     af4:	82 b9       	out	0x02, r24	; 2
				CUR_pos = 1;
     af6:	81 e0       	ldi	r24, 0x01	; 1
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	90 93 83 03 	sts	0x0383, r25	; 0x800383 <CUR_pos+0x1>
     afe:	80 93 82 03 	sts	0x0382, r24	; 0x800382 <CUR_pos>
				mTimer(ACCEL180[i]);
     b02:	fe 01       	movw	r30, r28
     b04:	ee 0f       	add	r30, r30
     b06:	ff 1f       	adc	r31, r31
     b08:	ea 5f       	subi	r30, 0xFA	; 250
     b0a:	fd 4f       	sbci	r31, 0xFD	; 253
     b0c:	80 81       	ld	r24, Z
     b0e:	91 81       	ldd	r25, Z+1	; 0x01
     b10:	49 dd       	rcall	.-1390   	; 0x5a4 <mTimer>
				break;
     b12:	10 c0       	rjmp	.+32     	; 0xb34 <counterClockwise+0x16c>
				case (3):
				PORTA = step3;
     b14:	8b e1       	ldi	r24, 0x1B	; 27
     b16:	82 b9       	out	0x02, r24	; 2
				CUR_pos = 2;
     b18:	82 e0       	ldi	r24, 0x02	; 2
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	90 93 83 03 	sts	0x0383, r25	; 0x800383 <CUR_pos+0x1>
     b20:	80 93 82 03 	sts	0x0382, r24	; 0x800382 <CUR_pos>
				mTimer(ACCEL180[i]);
     b24:	fe 01       	movw	r30, r28
     b26:	ee 0f       	add	r30, r30
     b28:	ff 1f       	adc	r31, r31
     b2a:	ea 5f       	subi	r30, 0xFA	; 250
     b2c:	fd 4f       	sbci	r31, 0xFD	; 253
     b2e:	80 81       	ld	r24, Z
     b30:	91 81       	ldd	r25, Z+1	; 0x01
     b32:	38 dd       	rcall	.-1424   	; 0x5a4 <mTimer>
				default:
				break;
			}	
		}
	} else if (steps == 100) {
		for (i=0; i<steps; i++){
     b34:	21 96       	adiw	r28, 0x01	; 1
     b36:	02 c0       	rjmp	.+4      	; 0xb3c <counterClockwise+0x174>
     b38:	c0 e0       	ldi	r28, 0x00	; 0
     b3a:	d0 e0       	ldi	r29, 0x00	; 0
     b3c:	c0 17       	cp	r28, r16
     b3e:	d1 07       	cpc	r29, r17
     b40:	0c f4       	brge	.+2      	; 0xb44 <counterClockwise+0x17c>
     b42:	a9 cf       	rjmp	.-174    	; 0xa96 <counterClockwise+0xce>
		} else if (i>steps-6){
			delay = delay+2;
		}
		*/
	}
}
     b44:	df 91       	pop	r29
     b46:	cf 91       	pop	r28
     b48:	1f 91       	pop	r17
     b4a:	0f 91       	pop	r16
     b4c:	08 95       	ret

00000b4e <homing>:

void homing(int steps) {
     b4e:	ef 92       	push	r14
     b50:	ff 92       	push	r15
     b52:	0f 93       	push	r16
     b54:	1f 93       	push	r17
     b56:	cf 93       	push	r28
     b58:	df 93       	push	r29
     b5a:	8c 01       	movw	r16, r24
	int delay = 20;
	for (int i=0; i<steps; i++){
     b5c:	c0 e0       	ldi	r28, 0x00	; 0
     b5e:	d0 e0       	ldi	r29, 0x00	; 0
		*/
	}
}

void homing(int steps) {
	int delay = 20;
     b60:	0f 2e       	mov	r0, r31
     b62:	f4 e1       	ldi	r31, 0x14	; 20
     b64:	ef 2e       	mov	r14, r31
     b66:	f1 2c       	mov	r15, r1
     b68:	f0 2d       	mov	r31, r0
	for (int i=0; i<steps; i++){
     b6a:	47 c0       	rjmp	.+142    	; 0xbfa <homing+0xac>
		switch(CUR_pos){
     b6c:	80 91 82 03 	lds	r24, 0x0382	; 0x800382 <CUR_pos>
     b70:	90 91 83 03 	lds	r25, 0x0383	; 0x800383 <CUR_pos+0x1>
     b74:	81 30       	cpi	r24, 0x01	; 1
     b76:	91 05       	cpc	r25, r1
     b78:	91 f0       	breq	.+36     	; 0xb9e <homing+0x50>
     b7a:	30 f0       	brcs	.+12     	; 0xb88 <homing+0x3a>
     b7c:	82 30       	cpi	r24, 0x02	; 2
     b7e:	91 05       	cpc	r25, r1
     b80:	b9 f0       	breq	.+46     	; 0xbb0 <homing+0x62>
     b82:	03 97       	sbiw	r24, 0x03	; 3
     b84:	01 f1       	breq	.+64     	; 0xbc6 <homing+0x78>
     b86:	29 c0       	rjmp	.+82     	; 0xbda <homing+0x8c>
			case (0):
			PORTA = step4;
     b88:	8d e1       	ldi	r24, 0x1D	; 29
     b8a:	82 b9       	out	0x02, r24	; 2
			CUR_pos = 3;
     b8c:	83 e0       	ldi	r24, 0x03	; 3
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	90 93 83 03 	sts	0x0383, r25	; 0x800383 <CUR_pos+0x1>
     b94:	80 93 82 03 	sts	0x0382, r24	; 0x800382 <CUR_pos>
			mTimer(delay);
     b98:	c7 01       	movw	r24, r14
     b9a:	04 dd       	rcall	.-1528   	; 0x5a4 <mTimer>
			break;
     b9c:	1e c0       	rjmp	.+60     	; 0xbda <homing+0x8c>
			case (1):
			PORTA = step1;
     b9e:	8d e2       	ldi	r24, 0x2D	; 45
     ba0:	82 b9       	out	0x02, r24	; 2
			CUR_pos = 0;
     ba2:	10 92 83 03 	sts	0x0383, r1	; 0x800383 <CUR_pos+0x1>
     ba6:	10 92 82 03 	sts	0x0382, r1	; 0x800382 <CUR_pos>
			mTimer(delay);
     baa:	c7 01       	movw	r24, r14
     bac:	fb dc       	rcall	.-1546   	; 0x5a4 <mTimer>
			break;
     bae:	15 c0       	rjmp	.+42     	; 0xbda <homing+0x8c>
			case (2):
			PORTA = step2;
     bb0:	8b e2       	ldi	r24, 0x2B	; 43
     bb2:	82 b9       	out	0x02, r24	; 2
			CUR_pos = 1;
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	90 93 83 03 	sts	0x0383, r25	; 0x800383 <CUR_pos+0x1>
     bbc:	80 93 82 03 	sts	0x0382, r24	; 0x800382 <CUR_pos>
			mTimer(delay);
     bc0:	c7 01       	movw	r24, r14
     bc2:	f0 dc       	rcall	.-1568   	; 0x5a4 <mTimer>
			break;
     bc4:	0a c0       	rjmp	.+20     	; 0xbda <homing+0x8c>
			case (3):
			PORTA = step3;
     bc6:	8b e1       	ldi	r24, 0x1B	; 27
     bc8:	82 b9       	out	0x02, r24	; 2
			CUR_pos = 2;
     bca:	82 e0       	ldi	r24, 0x02	; 2
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	90 93 83 03 	sts	0x0383, r25	; 0x800383 <CUR_pos+0x1>
     bd2:	80 93 82 03 	sts	0x0382, r24	; 0x800382 <CUR_pos>
			mTimer(delay);
     bd6:	c7 01       	movw	r24, r14
     bd8:	e5 dc       	rcall	.-1590   	; 0x5a4 <mTimer>
			break;
			default:
			break;
		}
	
		if (i<6){
     bda:	c6 30       	cpi	r28, 0x06	; 6
     bdc:	d1 05       	cpc	r29, r1
     bde:	24 f4       	brge	.+8      	; 0xbe8 <homing+0x9a>
			delay = delay-2;
     be0:	82 e0       	ldi	r24, 0x02	; 2
     be2:	e8 1a       	sub	r14, r24
     be4:	f1 08       	sbc	r15, r1
     be6:	08 c0       	rjmp	.+16     	; 0xbf8 <homing+0xaa>
		} else if (i>steps-6){
     be8:	c8 01       	movw	r24, r16
     bea:	06 97       	sbiw	r24, 0x06	; 6
     bec:	8c 17       	cp	r24, r28
     bee:	9d 07       	cpc	r25, r29
     bf0:	1c f4       	brge	.+6      	; 0xbf8 <homing+0xaa>
			delay = delay+2;
     bf2:	82 e0       	ldi	r24, 0x02	; 2
     bf4:	e8 0e       	add	r14, r24
     bf6:	f1 1c       	adc	r15, r1
	}
}

void homing(int steps) {
	int delay = 20;
	for (int i=0; i<steps; i++){
     bf8:	21 96       	adiw	r28, 0x01	; 1
     bfa:	c0 17       	cp	r28, r16
     bfc:	d1 07       	cpc	r29, r17
     bfe:	0c f4       	brge	.+2      	; 0xc02 <homing+0xb4>
     c00:	b5 cf       	rjmp	.-150    	; 0xb6c <homing+0x1e>
		} else if (i>steps-6){
			delay = delay+2;
		}
		
	}
}
     c02:	df 91       	pop	r29
     c04:	cf 91       	pop	r28
     c06:	1f 91       	pop	r17
     c08:	0f 91       	pop	r16
     c0a:	ff 90       	pop	r15
     c0c:	ef 90       	pop	r14
     c0e:	08 95       	ret

00000c10 <showResults>:
/**************************************************************************************
* DESC: Show current counts of sorted materials and unsorted parts on LCD
*/
void showResults (){
	
	LCDClear();
     c10:	60 e0       	ldi	r22, 0x00	; 0
     c12:	81 e0       	ldi	r24, 0x01	; 1
     c14:	c7 da       	rcall	.-2674   	; 0x1a4 <LCDByte>
	LCDWriteStringXY(0, 0, "BK");
     c16:	60 e0       	ldi	r22, 0x00	; 0
     c18:	80 e0       	ldi	r24, 0x00	; 0
     c1a:	a8 db       	rcall	.-2224   	; 0x36c <LCDGotoXY>
     c1c:	84 e6       	ldi	r24, 0x64	; 100
     c1e:	93 e0       	ldi	r25, 0x03	; 3
     c20:	39 db       	rcall	.-2446   	; 0x294 <LCDWriteString>
	LCDWriteIntXY(0, 1, SORTED[BLACK[CODE]], 2);
     c22:	61 e0       	ldi	r22, 0x01	; 1
     c24:	80 e0       	ldi	r24, 0x00	; 0
     c26:	a2 db       	rcall	.-2236   	; 0x36c <LCDGotoXY>
     c28:	e0 91 44 03 	lds	r30, 0x0344	; 0x800344 <BLACK>
     c2c:	f0 91 45 03 	lds	r31, 0x0345	; 0x800345 <BLACK+0x1>
     c30:	ee 0f       	add	r30, r30
     c32:	ff 1f       	adc	r31, r31
     c34:	e8 58       	subi	r30, 0x88	; 136
     c36:	fc 4f       	sbci	r31, 0xFC	; 252
     c38:	80 81       	ld	r24, Z
     c3a:	91 81       	ldd	r25, Z+1	; 0x01
     c3c:	62 e0       	ldi	r22, 0x02	; 2
     c3e:	70 e0       	ldi	r23, 0x00	; 0
     c40:	36 db       	rcall	.-2452   	; 0x2ae <LCDWriteInt>
	LCDWriteStringXY(3, 0, "ST");
     c42:	60 e0       	ldi	r22, 0x00	; 0
     c44:	83 e0       	ldi	r24, 0x03	; 3
     c46:	92 db       	rcall	.-2268   	; 0x36c <LCDGotoXY>
     c48:	87 e6       	ldi	r24, 0x67	; 103
     c4a:	93 e0       	ldi	r25, 0x03	; 3
     c4c:	23 db       	rcall	.-2490   	; 0x294 <LCDWriteString>
	LCDWriteIntXY(3, 1, SORTED[STEEL[CODE]], 2);
     c4e:	61 e0       	ldi	r22, 0x01	; 1
     c50:	83 e0       	ldi	r24, 0x03	; 3
     c52:	8c db       	rcall	.-2280   	; 0x36c <LCDGotoXY>
     c54:	e0 91 3e 03 	lds	r30, 0x033E	; 0x80033e <STEEL>
     c58:	f0 91 3f 03 	lds	r31, 0x033F	; 0x80033f <STEEL+0x1>
     c5c:	ee 0f       	add	r30, r30
     c5e:	ff 1f       	adc	r31, r31
     c60:	e8 58       	subi	r30, 0x88	; 136
     c62:	fc 4f       	sbci	r31, 0xFC	; 252
     c64:	80 81       	ld	r24, Z
     c66:	91 81       	ldd	r25, Z+1	; 0x01
     c68:	62 e0       	ldi	r22, 0x02	; 2
     c6a:	70 e0       	ldi	r23, 0x00	; 0
	LCDWriteStringXY(6, 0, "WT");
     c6c:	20 db       	rcall	.-2496   	; 0x2ae <LCDWriteInt>
     c6e:	60 e0       	ldi	r22, 0x00	; 0
     c70:	86 e0       	ldi	r24, 0x06	; 6
     c72:	7c db       	rcall	.-2312   	; 0x36c <LCDGotoXY>
     c74:	8a e6       	ldi	r24, 0x6A	; 106
     c76:	93 e0       	ldi	r25, 0x03	; 3
     c78:	0d db       	rcall	.-2534   	; 0x294 <LCDWriteString>
     c7a:	61 e0       	ldi	r22, 0x01	; 1
	LCDWriteIntXY(6, 1, SORTED[WHITE[CODE]], 2);
     c7c:	86 e0       	ldi	r24, 0x06	; 6
     c7e:	76 db       	rcall	.-2324   	; 0x36c <LCDGotoXY>
     c80:	e0 91 38 03 	lds	r30, 0x0338	; 0x800338 <WHITE>
     c84:	f0 91 39 03 	lds	r31, 0x0339	; 0x800339 <WHITE+0x1>
     c88:	ee 0f       	add	r30, r30
     c8a:	ff 1f       	adc	r31, r31
     c8c:	e8 58       	subi	r30, 0x88	; 136
     c8e:	fc 4f       	sbci	r31, 0xFC	; 252
     c90:	80 81       	ld	r24, Z
     c92:	91 81       	ldd	r25, Z+1	; 0x01
     c94:	62 e0       	ldi	r22, 0x02	; 2
     c96:	70 e0       	ldi	r23, 0x00	; 0
	LCDWriteStringXY(9, 0, "AL");
     c98:	0a db       	rcall	.-2540   	; 0x2ae <LCDWriteInt>
     c9a:	60 e0       	ldi	r22, 0x00	; 0
     c9c:	89 e0       	ldi	r24, 0x09	; 9
     c9e:	66 db       	rcall	.-2356   	; 0x36c <LCDGotoXY>
     ca0:	8d e6       	ldi	r24, 0x6D	; 109
     ca2:	93 e0       	ldi	r25, 0x03	; 3
     ca4:	f7 da       	rcall	.-2578   	; 0x294 <LCDWriteString>
     ca6:	61 e0       	ldi	r22, 0x01	; 1
	LCDWriteIntXY(9, 1, SORTED[ALUMINUM[CODE]], 2);
     ca8:	89 e0       	ldi	r24, 0x09	; 9
     caa:	60 db       	rcall	.-2368   	; 0x36c <LCDGotoXY>
     cac:	e0 91 32 03 	lds	r30, 0x0332	; 0x800332 <ALUMINUM>
     cb0:	f0 91 33 03 	lds	r31, 0x0333	; 0x800333 <ALUMINUM+0x1>
     cb4:	ee 0f       	add	r30, r30
     cb6:	ff 1f       	adc	r31, r31
     cb8:	e8 58       	subi	r30, 0x88	; 136
     cba:	fc 4f       	sbci	r31, 0xFC	; 252
     cbc:	80 81       	ld	r24, Z
     cbe:	91 81       	ldd	r25, Z+1	; 0x01
     cc0:	62 e0       	ldi	r22, 0x02	; 2
     cc2:	70 e0       	ldi	r23, 0x00	; 0
     cc4:	f4 da       	rcall	.-2584   	; 0x2ae <LCDWriteInt>
	if (RAMPDOWN==0){
     cc6:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <__data_end>
     cca:	90 91 75 03 	lds	r25, 0x0375	; 0x800375 <__data_end+0x1>
     cce:	89 2b       	or	r24, r25
		LCDWriteStringXY(12, 0, "US");
     cd0:	89 f4       	brne	.+34     	; 0xcf4 <showResults+0xe4>
     cd2:	60 e0       	ldi	r22, 0x00	; 0
     cd4:	8c e0       	ldi	r24, 0x0C	; 12
     cd6:	4a db       	rcall	.-2412   	; 0x36c <LCDGotoXY>
     cd8:	80 e7       	ldi	r24, 0x70	; 112
     cda:	93 e0       	ldi	r25, 0x03	; 3
     cdc:	db da       	rcall	.-2634   	; 0x294 <LCDWriteString>
     cde:	61 e0       	ldi	r22, 0x01	; 1
		LCDWriteIntXY(12, 1, size(&head, &tail), 2);	
     ce0:	8c e0       	ldi	r24, 0x0C	; 12
     ce2:	44 db       	rcall	.-2424   	; 0x36c <LCDGotoXY>
     ce4:	68 e8       	ldi	r22, 0x88	; 136
     ce6:	73 e0       	ldi	r23, 0x03	; 3
     ce8:	8a e8       	ldi	r24, 0x8A	; 138
     cea:	93 e0       	ldi	r25, 0x03	; 3
     cec:	9d dd       	rcall	.-1222   	; 0x828 <size>
     cee:	62 e0       	ldi	r22, 0x02	; 2
     cf0:	70 e0       	ldi	r23, 0x00	; 0
     cf2:	dd ca       	rjmp	.-2630   	; 0x2ae <LCDWriteInt>
     cf4:	08 95       	ret

00000cf6 <main>:
     cf6:	e1 e6       	ldi	r30, 0x61	; 97
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	80 e8       	ldi	r24, 0x80	; 128
     cfc:	80 83       	st	Z, r24
void showResults();

int main(int argc, char *argv[]){
	
	CLKPR = 0x80;
	CLKPR = 0x01;		//  sets system clock to 8MHz
     cfe:	81 e0       	ldi	r24, 0x01	; 1
     d00:	80 83       	st	Z, r24

    // set the PORT as inputs or outputs ==================================
	DDRA = 0xFF;							// stepper
     d02:	8f ef       	ldi	r24, 0xFF	; 255
     d04:	81 b9       	out	0x01, r24	; 1
	DDRB = 0xFF;		                    // Set PORTB to output
     d06:	84 b9       	out	0x04, r24	; 4
	DDRF = 0x00;                            // ADC INPUT
     d08:	10 ba       	out	0x10, r1	; 16
	DDRD = 0x00;                            // set interrupt to input
     d0a:	1a b8       	out	0x0a, r1	; 10
	DDRL = 0x00;                            // set port D to input for homing sensor
     d0c:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__TEXT_REGION_LENGTH__+0x7c010a>

	cli(); // disable all of the interrupt ================================
     d10:	f8 94       	cli

	TCCR1B |= _BV(CS11);                    // setup timer
     d12:	e1 e8       	ldi	r30, 0x81	; 129
     d14:	f0 e0       	ldi	r31, 0x00	; 0
     d16:	80 81       	ld	r24, Z
     d18:	82 60       	ori	r24, 0x02	; 2
     d1a:	80 83       	st	Z, r24
	//TCCR3B |= _BV(CS31);

    // set up LCD, interrupts, PWM, ADC ===================================
    LCDsetup();
     d1c:	95 dc       	rcall	.-1750   	; 0x648 <LCDsetup>
    INTsetup();
     d1e:	10 dc       	rcall	.-2016   	; 0x540 <INTsetup>
	PWMsetup();
     d20:	24 dc       	rcall	.-1976   	; 0x56a <PWMsetup>
     d22:	2f dc       	rcall	.-1954   	; 0x582 <ADCsetup>
    ADCsetup();
     d24:	78 94       	sei
     d26:	10 92 87 03 	sts	0x0387, r1	; 0x800387 <rtnLink+0x1>

	sei();	// sets the Global Enable for all interrupts ==================

    rtnLink = NULL;
     d2a:	10 92 86 03 	sts	0x0386, r1	; 0x800386 <rtnLink>
     d2e:	10 92 94 03 	sts	0x0394, r1	; 0x800394 <newLink+0x1>
	newLink = NULL;
     d32:	10 92 93 03 	sts	0x0393, r1	; 0x800393 <newLink>
     d36:	68 e8       	ldi	r22, 0x88	; 136
     d38:	73 e0       	ldi	r23, 0x03	; 3

    setup(&head, &tail);
     d3a:	8a e8       	ldi	r24, 0x8A	; 138
     d3c:	93 e0       	ldi	r25, 0x03	; 3
     d3e:	e4 dc       	rcall	.-1592   	; 0x708 <setup>
     d40:	8f ef       	ldi	r24, 0xFF	; 255
     d42:	93 e0       	ldi	r25, 0x03	; 3

    // initialize variables ===============================================
	MIN = 1023;
     d44:	90 93 98 03 	sts	0x0398, r25	; 0x800398 <MIN+0x1>
     d48:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <MIN>
     d4c:	10 92 8c 03 	sts	0x038C, r1	; 0x80038c <STATE>
    STATE = 0;
     d50:	10 92 83 03 	sts	0x0383, r1	; 0x800383 <CUR_pos+0x1>
	CUR_pos = 0;
     d54:	10 92 82 03 	sts	0x0382, r1	; 0x800382 <CUR_pos>
     d58:	03 c0       	rjmp	.+6      	; 0xd60 <main+0x6a>
	
	while ((PINL & 0x01) == 0x01){
     d5a:	81 e0       	ldi	r24, 0x01	; 1
		homing(1);
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	f7 de       	rcall	.-530    	; 0xb4e <homing>
     d60:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x7c0109>
    // initialize variables ===============================================
	MIN = 1023;
    STATE = 0;
	CUR_pos = 0;
	
	while ((PINL & 0x01) == 0x01){
     d64:	80 fd       	sbrc	r24, 0
     d66:	f9 cf       	rjmp	.-14     	; 0xd5a <main+0x64>
     d68:	88 e0       	ldi	r24, 0x08	; 8
		homing(1);
	}
	homing(8);			// go extra steps to center
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	f0 de       	rcall	.-544    	; 0xb4e <homing>
     d6e:	8e e0       	ldi	r24, 0x0E	; 14
     d70:	85 b9       	out	0x05, r24	; 5
	
	PORTB = CCW;
     d72:	10 92 8e 03 	sts	0x038E, r1	; 0x80038e <BUCKET_pos+0x1>
	
	

	BUCKET_pos = 0;
     d76:	10 92 8d 03 	sts	0x038D, r1	; 0x80038d <BUCKET_pos>
     d7a:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <__data_end>
     */

	POLLING_STAGE:

	// Sort rest of items on conveyor then shut down
	if ((RAMPDOWN == 1) && (isEmpty(&head))){ //size(&head, &tail) == 0) {
     d7e:	90 91 75 03 	lds	r25, 0x0375	; 0x800375 <__data_end+0x1>
     d82:	01 97       	sbiw	r24, 0x01	; 1
     d84:	81 f4       	brne	.+32     	; 0xda6 <main+0xb0>
     d86:	8a e8       	ldi	r24, 0x8A	; 138
     d88:	93 e0       	ldi	r25, 0x03	; 3
     d8a:	46 dd       	rcall	.-1396   	; 0x818 <isEmpty>
     d8c:	88 23       	and	r24, r24
     d8e:	59 f0       	breq	.+22     	; 0xda6 <main+0xb0>
     d90:	88 ee       	ldi	r24, 0xE8	; 232
		mTimer(1000);
     d92:	93 e0       	ldi	r25, 0x03	; 3
     d94:	07 dc       	rcall	.-2034   	; 0x5a4 <mTimer>
     d96:	8f e0       	ldi	r24, 0x0F	; 15
		PORTB = BRAKE;		// stop motor
     d98:	85 b9       	out	0x05, r24	; 5
     d9a:	8a e0       	ldi	r24, 0x0A	; 10
		mTimer(10);
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	02 dc       	rcall	.-2044   	; 0x5a4 <mTimer>
     da0:	15 b8       	out	0x05, r1	; 5
     da2:	36 df       	rcall	.-404    	; 0xc10 <showResults>
		PORTB = 0x00;		// kill motor
     da4:	ff cf       	rjmp	.-2      	; 0xda4 <main+0xae>
		showResults();
     da6:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <STATE>
     daa:	83 30       	cpi	r24, 0x03	; 3
		while (1) {}		// stop program				
	}

	switch(STATE){
     dac:	21 f0       	breq	.+8      	; 0xdb6 <main+0xc0>
     dae:	85 30       	cpi	r24, 0x05	; 5
     db0:	09 f4       	brne	.+2      	; 0xdb4 <main+0xbe>
     db2:	6b c0       	rjmp	.+214    	; 0xe8a <main+0x194>
     db4:	e2 cf       	rjmp	.-60     	; 0xd7a <main+0x84>
     db6:	e0 91 8a 03 	lds	r30, 0x038A	; 0x80038a <head>
     dba:	f0 91 8b 03 	lds	r31, 0x038B	; 0x80038b <head+0x1>
     * DESC: Dequeue item from linked list, rotate bucket to sort item
     */

	BUCKET_STAGE:

	DESIRED_pos = head->e.itemCode;		// need to get value of head before dequeueing
     dbe:	80 81       	ld	r24, Z
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	90 93 92 03 	sts	0x0392, r25	; 0x800392 <DESIRED_pos+0x1>
     dc6:	80 93 91 03 	sts	0x0391, r24	; 0x800391 <DESIRED_pos>
     dca:	46 e8       	ldi	r20, 0x86	; 134
     dcc:	53 e0       	ldi	r21, 0x03	; 3
    dequeue(&head, &tail, &rtnLink);	// Remove the item at the head of the list
     dce:	68 e8       	ldi	r22, 0x88	; 136
     dd0:	73 e0       	ldi	r23, 0x03	; 3
     dd2:	8a e8       	ldi	r24, 0x8A	; 138
     dd4:	93 e0       	ldi	r25, 0x03	; 3
     dd6:	08 dd       	rcall	.-1520   	; 0x7e8 <dequeue>
     dd8:	80 91 86 03 	lds	r24, 0x0386	; 0x800386 <rtnLink>
    free(rtnLink);						// Free up memory    
     ddc:	90 91 87 03 	lds	r25, 0x0387	; 0x800387 <rtnLink+0x1>
     de0:	60 d1       	rcall	.+704    	; 0x10a2 <free>
     de2:	8f e0       	ldi	r24, 0x0F	; 15
     de4:	85 b9       	out	0x05, r24	; 5
     de6:	80 91 8d 03 	lds	r24, 0x038D	; 0x80038d <BUCKET_pos>

	PORTB = BRAKE;              		// stop conveyor
     dea:	90 91 8e 03 	lds	r25, 0x038E	; 0x80038e <BUCKET_pos+0x1>
	// Black - 0
	// Steel - 1
	// White - 2
	// Aluminum - 3
	
	switch (BUCKET_pos - DESIRED_pos) {
     dee:	20 91 91 03 	lds	r18, 0x0391	; 0x800391 <DESIRED_pos>
     df2:	30 91 92 03 	lds	r19, 0x0392	; 0x800392 <DESIRED_pos+0x1>
     df6:	82 1b       	sub	r24, r18
     df8:	93 0b       	sbc	r25, r19
     dfa:	83 30       	cpi	r24, 0x03	; 3
     dfc:	91 05       	cpc	r25, r1
     dfe:	c1 f0       	breq	.+48     	; 0xe30 <main+0x13a>
     e00:	30 f4       	brcc	.+12     	; 0xe0e <main+0x118>
     e02:	81 30       	cpi	r24, 0x01	; 1
     e04:	91 05       	cpc	r25, r1
     e06:	51 f0       	breq	.+20     	; 0xe1c <main+0x126>
     e08:	02 97       	sbiw	r24, 0x02	; 2
     e0a:	e1 f0       	breq	.+56     	; 0xe44 <main+0x14e>
     e0c:	24 c0       	rjmp	.+72     	; 0xe56 <main+0x160>
     e0e:	8e 3f       	cpi	r24, 0xFE	; 254
     e10:	2f ef       	ldi	r18, 0xFF	; 255
     e12:	92 07       	cpc	r25, r18
     e14:	b9 f0       	breq	.+46     	; 0xe44 <main+0x14e>
     e16:	60 f4       	brcc	.+24     	; 0xe30 <main+0x13a>
     e18:	03 96       	adiw	r24, 0x03	; 3
     e1a:	e9 f4       	brne	.+58     	; 0xe56 <main+0x160>
		case(0):				// already at desired position
		break;
		case(1):
		case(-3):	
		mTimer(30);				// wait for previous part to drop
     e1c:	8e e1       	ldi	r24, 0x1E	; 30
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	c1 db       	rcall	.-2174   	; 0x5a4 <mTimer>
		clockwise(50);			// 50 steps away from desired position
     e22:	82 e3       	ldi	r24, 0x32	; 50
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	0d dd       	rcall	.-1510   	; 0x842 <clockwise>
		mTimer(20);
     e28:	84 e1       	ldi	r24, 0x14	; 20
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	bb db       	rcall	.-2186   	; 0x5a4 <mTimer>
		break;
		case(-1):
		case(3):
		mTimer(30);				// wait for previous part to drop
     e2e:	13 c0       	rjmp	.+38     	; 0xe56 <main+0x160>
     e30:	8e e1       	ldi	r24, 0x1E	; 30
     e32:	90 e0       	ldi	r25, 0x00	; 0
		counterClockwise(50);	// 50 steps away from desired position
     e34:	b7 db       	rcall	.-2194   	; 0x5a4 <mTimer>
     e36:	82 e3       	ldi	r24, 0x32	; 50
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	c6 dd       	rcall	.-1140   	; 0x9c8 <counterClockwise>
		mTimer(20);
     e3c:	84 e1       	ldi	r24, 0x14	; 20
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	b1 db       	rcall	.-2206   	; 0x5a4 <mTimer>
     e42:	09 c0       	rjmp	.+18     	; 0xe56 <main+0x160>
		break;		
     e44:	8e e1       	ldi	r24, 0x1E	; 30
		case(2):
		case(-2):
		mTimer(30);				// wait for previous part to drop
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	ad db       	rcall	.-2214   	; 0x5a4 <mTimer>
     e4a:	84 e6       	ldi	r24, 0x64	; 100
     e4c:	90 e0       	ldi	r25, 0x00	; 0
		clockwise(100);
     e4e:	f9 dc       	rcall	.-1550   	; 0x842 <clockwise>
     e50:	84 e1       	ldi	r24, 0x14	; 20
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	a7 db       	rcall	.-2226   	; 0x5a4 <mTimer>
		mTimer(20);
     e56:	80 91 91 03 	lds	r24, 0x0391	; 0x800391 <DESIRED_pos>
     e5a:	90 91 92 03 	lds	r25, 0x0392	; 0x800392 <DESIRED_pos+0x1>
		break;
	}
	
	BUCKET_pos = DESIRED_pos;
     e5e:	90 93 8e 03 	sts	0x038E, r25	; 0x80038e <BUCKET_pos+0x1>
     e62:	80 93 8d 03 	sts	0x038D, r24	; 0x80038d <BUCKET_pos>
     e66:	e0 91 91 03 	lds	r30, 0x0391	; 0x800391 <DESIRED_pos>
     e6a:	f0 91 92 03 	lds	r31, 0x0392	; 0x800392 <DESIRED_pos+0x1>
	SORTED[DESIRED_pos] += 1;	// increment the SORTED count
     e6e:	ee 0f       	add	r30, r30
     e70:	ff 1f       	adc	r31, r31
     e72:	e8 58       	subi	r30, 0x88	; 136
     e74:	fc 4f       	sbci	r31, 0xFC	; 252
     e76:	80 81       	ld	r24, Z
     e78:	91 81       	ldd	r25, Z+1	; 0x01
     e7a:	01 96       	adiw	r24, 0x01	; 1
     e7c:	91 83       	std	Z+1, r25	; 0x01
     e7e:	80 83       	st	Z, r24
     e80:	8e e0       	ldi	r24, 0x0E	; 14
     e82:	85 b9       	out	0x05, r24	; 5
     e84:	10 92 8c 03 	sts	0x038C, r1	; 0x80038c <STATE>
	PORTB = CCW;				// start conveyor and return to polling
     e88:	78 cf       	rjmp	.-272    	; 0xd7a <main+0x84>
     e8a:	80 e0       	ldi	r24, 0x00	; 0

	//Reset the state variable
	STATE = 0;
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	08 95       	ret

00000e90 <__vector_2>:
	goto POLLING_STAGE;
     e90:	1f 92       	push	r1

	END:

	return(0);

}
     e92:	0f 92       	push	r0
     e94:	0f b6       	in	r0, 0x3f	; 63
     e96:	0f 92       	push	r0
	while((PIND & 0x01) == 0x00){};         // wait for button to be released
	mTimer(20);								// 20ms debounce
}

// This interrupt fires when the pause/play button is pressed
ISR(INT1_vect) {
     e98:	11 24       	eor	r1, r1
     e9a:	0b b6       	in	r0, 0x3b	; 59
     e9c:	0f 92       	push	r0
     e9e:	2f 93       	push	r18
     ea0:	3f 93       	push	r19
     ea2:	4f 93       	push	r20
     ea4:	5f 93       	push	r21
     ea6:	6f 93       	push	r22
     ea8:	7f 93       	push	r23
     eaa:	8f 93       	push	r24
     eac:	9f 93       	push	r25
     eae:	af 93       	push	r26
     eb0:	bf 93       	push	r27
     eb2:	ef 93       	push	r30
     eb4:	ff 93       	push	r31

	
	
	if ((PIND & 0x02) == 0x00) {	
     eb6:	49 99       	sbic	0x09, 1	; 9
     eb8:	1d c0       	rjmp	.+58     	; 0xef4 <__vector_2+0x64>
		mTimer(20);								// 20ms debounce
     eba:	84 e1       	ldi	r24, 0x14	; 20
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	72 db       	rcall	.-2332   	; 0x5a4 <mTimer>
		

		switch(SYSTEMRUNNING) {                         // Check the current status
     ec0:	80 91 4a 03 	lds	r24, 0x034A	; 0x80034a <SYSTEMRUNNING>
     ec4:	90 91 4b 03 	lds	r25, 0x034B	; 0x80034b <SYSTEMRUNNING+0x1>
     ec8:	00 97       	sbiw	r24, 0x00	; 0
     eca:	51 f0       	breq	.+20     	; 0xee0 <__vector_2+0x50>
     ecc:	01 97       	sbiw	r24, 0x01	; 1
     ece:	91 f4       	brne	.+36     	; 0xef4 <__vector_2+0x64>
			case (1):                         // and if motor is going ccw
			//LAST_PORTB = PORTB;             // record operation mode before pause
			PORTB = BRAKE;                  // stop motor
     ed0:	8f e0       	ldi	r24, 0x0F	; 15
     ed2:	85 b9       	out	0x05, r24	; 5
			SYSTEMRUNNING = 0;
     ed4:	10 92 4b 03 	sts	0x034B, r1	; 0x80034b <SYSTEMRUNNING+0x1>
     ed8:	10 92 4a 03 	sts	0x034A, r1	; 0x80034a <SYSTEMRUNNING>
			showResults();
     edc:	99 de       	rcall	.-718    	; 0xc10 <showResults>
			break;
     ede:	0a c0       	rjmp	.+20     	; 0xef4 <__vector_2+0x64>
			case(0):
			PORTB = CCW;             // resume if motor is braked
     ee0:	8e e0       	ldi	r24, 0x0E	; 14
     ee2:	85 b9       	out	0x05, r24	; 5
			//LAST_PORTB = 0;                 // clear last pre-pause value
			SYSTEMRUNNING = 1;
     ee4:	81 e0       	ldi	r24, 0x01	; 1
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	90 93 4b 03 	sts	0x034B, r25	; 0x80034b <SYSTEMRUNNING+0x1>
     eec:	80 93 4a 03 	sts	0x034A, r24	; 0x80034a <SYSTEMRUNNING>
			LCDClear();
     ef0:	60 e0       	ldi	r22, 0x00	; 0
     ef2:	58 d9       	rcall	.-3408   	; 0x1a4 <LCDByte>
			default:
			break;
		}		
	}

	while((PIND & 0x02) == 0x00){};         // wait for button to be released
     ef4:	49 9b       	sbis	0x09, 1	; 9
	mTimer(20);								// 20ms debounce
     ef6:	fe cf       	rjmp	.-4      	; 0xef4 <__vector_2+0x64>
     ef8:	84 e1       	ldi	r24, 0x14	; 20
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	53 db       	rcall	.-2394   	; 0x5a4 <mTimer>
}
     efe:	ff 91       	pop	r31
     f00:	ef 91       	pop	r30
     f02:	bf 91       	pop	r27
     f04:	af 91       	pop	r26
     f06:	9f 91       	pop	r25
     f08:	8f 91       	pop	r24
     f0a:	7f 91       	pop	r23
     f0c:	6f 91       	pop	r22
     f0e:	5f 91       	pop	r21
     f10:	4f 91       	pop	r20
     f12:	3f 91       	pop	r19
     f14:	2f 91       	pop	r18
     f16:	0f 90       	pop	r0
     f18:	0b be       	out	0x3b, r0	; 59
     f1a:	0f 90       	pop	r0
     f1c:	0f be       	out	0x3f, r0	; 63
     f1e:	0f 90       	pop	r0
     f20:	1f 90       	pop	r1
     f22:	18 95       	reti

00000f24 <__divmodhi4>:
     f24:	97 fb       	bst	r25, 7
     f26:	07 2e       	mov	r0, r23
     f28:	16 f4       	brtc	.+4      	; 0xf2e <__divmodhi4+0xa>
     f2a:	00 94       	com	r0
     f2c:	06 d0       	rcall	.+12     	; 0xf3a <__divmodhi4_neg1>
     f2e:	77 fd       	sbrc	r23, 7
     f30:	08 d0       	rcall	.+16     	; 0xf42 <__divmodhi4_neg2>
     f32:	0b d0       	rcall	.+22     	; 0xf4a <__udivmodhi4>
     f34:	07 fc       	sbrc	r0, 7
     f36:	05 d0       	rcall	.+10     	; 0xf42 <__divmodhi4_neg2>
     f38:	3e f4       	brtc	.+14     	; 0xf48 <__divmodhi4_exit>

00000f3a <__divmodhi4_neg1>:
     f3a:	90 95       	com	r25
     f3c:	81 95       	neg	r24
     f3e:	9f 4f       	sbci	r25, 0xFF	; 255
     f40:	08 95       	ret

00000f42 <__divmodhi4_neg2>:
     f42:	70 95       	com	r23
     f44:	61 95       	neg	r22
     f46:	7f 4f       	sbci	r23, 0xFF	; 255

00000f48 <__divmodhi4_exit>:
     f48:	08 95       	ret

00000f4a <__udivmodhi4>:
     f4a:	aa 1b       	sub	r26, r26
     f4c:	bb 1b       	sub	r27, r27
     f4e:	51 e1       	ldi	r21, 0x11	; 17
     f50:	07 c0       	rjmp	.+14     	; 0xf60 <__udivmodhi4_ep>

00000f52 <__udivmodhi4_loop>:
     f52:	aa 1f       	adc	r26, r26
     f54:	bb 1f       	adc	r27, r27
     f56:	a6 17       	cp	r26, r22
     f58:	b7 07       	cpc	r27, r23
     f5a:	10 f0       	brcs	.+4      	; 0xf60 <__udivmodhi4_ep>
     f5c:	a6 1b       	sub	r26, r22
     f5e:	b7 0b       	sbc	r27, r23

00000f60 <__udivmodhi4_ep>:
     f60:	88 1f       	adc	r24, r24
     f62:	99 1f       	adc	r25, r25
     f64:	5a 95       	dec	r21
     f66:	a9 f7       	brne	.-22     	; 0xf52 <__udivmodhi4_loop>
     f68:	80 95       	com	r24
     f6a:	90 95       	com	r25
     f6c:	bc 01       	movw	r22, r24
     f6e:	cd 01       	movw	r24, r26
     f70:	08 95       	ret

00000f72 <malloc>:
     f72:	0f 93       	push	r16
     f74:	1f 93       	push	r17
     f76:	cf 93       	push	r28
     f78:	df 93       	push	r29
     f7a:	82 30       	cpi	r24, 0x02	; 2
     f7c:	91 05       	cpc	r25, r1
     f7e:	10 f4       	brcc	.+4      	; 0xf84 <malloc+0x12>
     f80:	82 e0       	ldi	r24, 0x02	; 2
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	e0 91 9b 03 	lds	r30, 0x039B	; 0x80039b <__flp>
     f88:	f0 91 9c 03 	lds	r31, 0x039C	; 0x80039c <__flp+0x1>
     f8c:	20 e0       	ldi	r18, 0x00	; 0
     f8e:	30 e0       	ldi	r19, 0x00	; 0
     f90:	a0 e0       	ldi	r26, 0x00	; 0
     f92:	b0 e0       	ldi	r27, 0x00	; 0
     f94:	30 97       	sbiw	r30, 0x00	; 0
     f96:	19 f1       	breq	.+70     	; 0xfde <malloc+0x6c>
     f98:	40 81       	ld	r20, Z
     f9a:	51 81       	ldd	r21, Z+1	; 0x01
     f9c:	02 81       	ldd	r16, Z+2	; 0x02
     f9e:	13 81       	ldd	r17, Z+3	; 0x03
     fa0:	48 17       	cp	r20, r24
     fa2:	59 07       	cpc	r21, r25
     fa4:	c8 f0       	brcs	.+50     	; 0xfd8 <malloc+0x66>
     fa6:	84 17       	cp	r24, r20
     fa8:	95 07       	cpc	r25, r21
     faa:	69 f4       	brne	.+26     	; 0xfc6 <malloc+0x54>
     fac:	10 97       	sbiw	r26, 0x00	; 0
     fae:	31 f0       	breq	.+12     	; 0xfbc <malloc+0x4a>
     fb0:	12 96       	adiw	r26, 0x02	; 2
     fb2:	0c 93       	st	X, r16
     fb4:	12 97       	sbiw	r26, 0x02	; 2
     fb6:	13 96       	adiw	r26, 0x03	; 3
     fb8:	1c 93       	st	X, r17
     fba:	27 c0       	rjmp	.+78     	; 0x100a <__EEPROM_REGION_LENGTH__+0xa>
     fbc:	00 93 9b 03 	sts	0x039B, r16	; 0x80039b <__flp>
     fc0:	10 93 9c 03 	sts	0x039C, r17	; 0x80039c <__flp+0x1>
     fc4:	22 c0       	rjmp	.+68     	; 0x100a <__EEPROM_REGION_LENGTH__+0xa>
     fc6:	21 15       	cp	r18, r1
     fc8:	31 05       	cpc	r19, r1
     fca:	19 f0       	breq	.+6      	; 0xfd2 <malloc+0x60>
     fcc:	42 17       	cp	r20, r18
     fce:	53 07       	cpc	r21, r19
     fd0:	18 f4       	brcc	.+6      	; 0xfd8 <malloc+0x66>
     fd2:	9a 01       	movw	r18, r20
     fd4:	bd 01       	movw	r22, r26
     fd6:	ef 01       	movw	r28, r30
     fd8:	df 01       	movw	r26, r30
     fda:	f8 01       	movw	r30, r16
     fdc:	db cf       	rjmp	.-74     	; 0xf94 <malloc+0x22>
     fde:	21 15       	cp	r18, r1
     fe0:	31 05       	cpc	r19, r1
     fe2:	f9 f0       	breq	.+62     	; 0x1022 <__EEPROM_REGION_LENGTH__+0x22>
     fe4:	28 1b       	sub	r18, r24
     fe6:	39 0b       	sbc	r19, r25
     fe8:	24 30       	cpi	r18, 0x04	; 4
     fea:	31 05       	cpc	r19, r1
     fec:	80 f4       	brcc	.+32     	; 0x100e <__EEPROM_REGION_LENGTH__+0xe>
     fee:	8a 81       	ldd	r24, Y+2	; 0x02
     ff0:	9b 81       	ldd	r25, Y+3	; 0x03
     ff2:	61 15       	cp	r22, r1
     ff4:	71 05       	cpc	r23, r1
     ff6:	21 f0       	breq	.+8      	; 0x1000 <__EEPROM_REGION_LENGTH__>
     ff8:	fb 01       	movw	r30, r22
     ffa:	93 83       	std	Z+3, r25	; 0x03
     ffc:	82 83       	std	Z+2, r24	; 0x02
     ffe:	04 c0       	rjmp	.+8      	; 0x1008 <__EEPROM_REGION_LENGTH__+0x8>
    1000:	90 93 9c 03 	sts	0x039C, r25	; 0x80039c <__flp+0x1>
    1004:	80 93 9b 03 	sts	0x039B, r24	; 0x80039b <__flp>
    1008:	fe 01       	movw	r30, r28
    100a:	32 96       	adiw	r30, 0x02	; 2
    100c:	44 c0       	rjmp	.+136    	; 0x1096 <__EEPROM_REGION_LENGTH__+0x96>
    100e:	fe 01       	movw	r30, r28
    1010:	e2 0f       	add	r30, r18
    1012:	f3 1f       	adc	r31, r19
    1014:	81 93       	st	Z+, r24
    1016:	91 93       	st	Z+, r25
    1018:	22 50       	subi	r18, 0x02	; 2
    101a:	31 09       	sbc	r19, r1
    101c:	39 83       	std	Y+1, r19	; 0x01
    101e:	28 83       	st	Y, r18
    1020:	3a c0       	rjmp	.+116    	; 0x1096 <__EEPROM_REGION_LENGTH__+0x96>
    1022:	20 91 99 03 	lds	r18, 0x0399	; 0x800399 <__brkval>
    1026:	30 91 9a 03 	lds	r19, 0x039A	; 0x80039a <__brkval+0x1>
    102a:	23 2b       	or	r18, r19
    102c:	41 f4       	brne	.+16     	; 0x103e <__EEPROM_REGION_LENGTH__+0x3e>
    102e:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    1032:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    1036:	30 93 9a 03 	sts	0x039A, r19	; 0x80039a <__brkval+0x1>
    103a:	20 93 99 03 	sts	0x0399, r18	; 0x800399 <__brkval>
    103e:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    1042:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    1046:	21 15       	cp	r18, r1
    1048:	31 05       	cpc	r19, r1
    104a:	41 f4       	brne	.+16     	; 0x105c <__EEPROM_REGION_LENGTH__+0x5c>
    104c:	2d b7       	in	r18, 0x3d	; 61
    104e:	3e b7       	in	r19, 0x3e	; 62
    1050:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    1054:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    1058:	24 1b       	sub	r18, r20
    105a:	35 0b       	sbc	r19, r21
    105c:	e0 91 99 03 	lds	r30, 0x0399	; 0x800399 <__brkval>
    1060:	f0 91 9a 03 	lds	r31, 0x039A	; 0x80039a <__brkval+0x1>
    1064:	e2 17       	cp	r30, r18
    1066:	f3 07       	cpc	r31, r19
    1068:	a0 f4       	brcc	.+40     	; 0x1092 <__EEPROM_REGION_LENGTH__+0x92>
    106a:	2e 1b       	sub	r18, r30
    106c:	3f 0b       	sbc	r19, r31
    106e:	28 17       	cp	r18, r24
    1070:	39 07       	cpc	r19, r25
    1072:	78 f0       	brcs	.+30     	; 0x1092 <__EEPROM_REGION_LENGTH__+0x92>
    1074:	ac 01       	movw	r20, r24
    1076:	4e 5f       	subi	r20, 0xFE	; 254
    1078:	5f 4f       	sbci	r21, 0xFF	; 255
    107a:	24 17       	cp	r18, r20
    107c:	35 07       	cpc	r19, r21
    107e:	48 f0       	brcs	.+18     	; 0x1092 <__EEPROM_REGION_LENGTH__+0x92>
    1080:	4e 0f       	add	r20, r30
    1082:	5f 1f       	adc	r21, r31
    1084:	50 93 9a 03 	sts	0x039A, r21	; 0x80039a <__brkval+0x1>
    1088:	40 93 99 03 	sts	0x0399, r20	; 0x800399 <__brkval>
    108c:	81 93       	st	Z+, r24
    108e:	91 93       	st	Z+, r25
    1090:	02 c0       	rjmp	.+4      	; 0x1096 <__EEPROM_REGION_LENGTH__+0x96>
    1092:	e0 e0       	ldi	r30, 0x00	; 0
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	cf 01       	movw	r24, r30
    1098:	df 91       	pop	r29
    109a:	cf 91       	pop	r28
    109c:	1f 91       	pop	r17
    109e:	0f 91       	pop	r16
    10a0:	08 95       	ret

000010a2 <free>:
    10a2:	cf 93       	push	r28
    10a4:	df 93       	push	r29
    10a6:	00 97       	sbiw	r24, 0x00	; 0
    10a8:	09 f4       	brne	.+2      	; 0x10ac <free+0xa>
    10aa:	81 c0       	rjmp	.+258    	; 0x11ae <free+0x10c>
    10ac:	fc 01       	movw	r30, r24
    10ae:	32 97       	sbiw	r30, 0x02	; 2
    10b0:	13 82       	std	Z+3, r1	; 0x03
    10b2:	12 82       	std	Z+2, r1	; 0x02
    10b4:	a0 91 9b 03 	lds	r26, 0x039B	; 0x80039b <__flp>
    10b8:	b0 91 9c 03 	lds	r27, 0x039C	; 0x80039c <__flp+0x1>
    10bc:	10 97       	sbiw	r26, 0x00	; 0
    10be:	81 f4       	brne	.+32     	; 0x10e0 <free+0x3e>
    10c0:	20 81       	ld	r18, Z
    10c2:	31 81       	ldd	r19, Z+1	; 0x01
    10c4:	82 0f       	add	r24, r18
    10c6:	93 1f       	adc	r25, r19
    10c8:	20 91 99 03 	lds	r18, 0x0399	; 0x800399 <__brkval>
    10cc:	30 91 9a 03 	lds	r19, 0x039A	; 0x80039a <__brkval+0x1>
    10d0:	28 17       	cp	r18, r24
    10d2:	39 07       	cpc	r19, r25
    10d4:	51 f5       	brne	.+84     	; 0x112a <free+0x88>
    10d6:	f0 93 9a 03 	sts	0x039A, r31	; 0x80039a <__brkval+0x1>
    10da:	e0 93 99 03 	sts	0x0399, r30	; 0x800399 <__brkval>
    10de:	67 c0       	rjmp	.+206    	; 0x11ae <free+0x10c>
    10e0:	ed 01       	movw	r28, r26
    10e2:	20 e0       	ldi	r18, 0x00	; 0
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	ce 17       	cp	r28, r30
    10e8:	df 07       	cpc	r29, r31
    10ea:	40 f4       	brcc	.+16     	; 0x10fc <free+0x5a>
    10ec:	4a 81       	ldd	r20, Y+2	; 0x02
    10ee:	5b 81       	ldd	r21, Y+3	; 0x03
    10f0:	9e 01       	movw	r18, r28
    10f2:	41 15       	cp	r20, r1
    10f4:	51 05       	cpc	r21, r1
    10f6:	f1 f0       	breq	.+60     	; 0x1134 <free+0x92>
    10f8:	ea 01       	movw	r28, r20
    10fa:	f5 cf       	rjmp	.-22     	; 0x10e6 <free+0x44>
    10fc:	d3 83       	std	Z+3, r29	; 0x03
    10fe:	c2 83       	std	Z+2, r28	; 0x02
    1100:	40 81       	ld	r20, Z
    1102:	51 81       	ldd	r21, Z+1	; 0x01
    1104:	84 0f       	add	r24, r20
    1106:	95 1f       	adc	r25, r21
    1108:	c8 17       	cp	r28, r24
    110a:	d9 07       	cpc	r29, r25
    110c:	59 f4       	brne	.+22     	; 0x1124 <free+0x82>
    110e:	88 81       	ld	r24, Y
    1110:	99 81       	ldd	r25, Y+1	; 0x01
    1112:	84 0f       	add	r24, r20
    1114:	95 1f       	adc	r25, r21
    1116:	02 96       	adiw	r24, 0x02	; 2
    1118:	91 83       	std	Z+1, r25	; 0x01
    111a:	80 83       	st	Z, r24
    111c:	8a 81       	ldd	r24, Y+2	; 0x02
    111e:	9b 81       	ldd	r25, Y+3	; 0x03
    1120:	93 83       	std	Z+3, r25	; 0x03
    1122:	82 83       	std	Z+2, r24	; 0x02
    1124:	21 15       	cp	r18, r1
    1126:	31 05       	cpc	r19, r1
    1128:	29 f4       	brne	.+10     	; 0x1134 <free+0x92>
    112a:	f0 93 9c 03 	sts	0x039C, r31	; 0x80039c <__flp+0x1>
    112e:	e0 93 9b 03 	sts	0x039B, r30	; 0x80039b <__flp>
    1132:	3d c0       	rjmp	.+122    	; 0x11ae <free+0x10c>
    1134:	e9 01       	movw	r28, r18
    1136:	fb 83       	std	Y+3, r31	; 0x03
    1138:	ea 83       	std	Y+2, r30	; 0x02
    113a:	49 91       	ld	r20, Y+
    113c:	59 91       	ld	r21, Y+
    113e:	c4 0f       	add	r28, r20
    1140:	d5 1f       	adc	r29, r21
    1142:	ec 17       	cp	r30, r28
    1144:	fd 07       	cpc	r31, r29
    1146:	61 f4       	brne	.+24     	; 0x1160 <free+0xbe>
    1148:	80 81       	ld	r24, Z
    114a:	91 81       	ldd	r25, Z+1	; 0x01
    114c:	84 0f       	add	r24, r20
    114e:	95 1f       	adc	r25, r21
    1150:	02 96       	adiw	r24, 0x02	; 2
    1152:	e9 01       	movw	r28, r18
    1154:	99 83       	std	Y+1, r25	; 0x01
    1156:	88 83       	st	Y, r24
    1158:	82 81       	ldd	r24, Z+2	; 0x02
    115a:	93 81       	ldd	r25, Z+3	; 0x03
    115c:	9b 83       	std	Y+3, r25	; 0x03
    115e:	8a 83       	std	Y+2, r24	; 0x02
    1160:	e0 e0       	ldi	r30, 0x00	; 0
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	12 96       	adiw	r26, 0x02	; 2
    1166:	8d 91       	ld	r24, X+
    1168:	9c 91       	ld	r25, X
    116a:	13 97       	sbiw	r26, 0x03	; 3
    116c:	00 97       	sbiw	r24, 0x00	; 0
    116e:	19 f0       	breq	.+6      	; 0x1176 <free+0xd4>
    1170:	fd 01       	movw	r30, r26
    1172:	dc 01       	movw	r26, r24
    1174:	f7 cf       	rjmp	.-18     	; 0x1164 <free+0xc2>
    1176:	8d 91       	ld	r24, X+
    1178:	9c 91       	ld	r25, X
    117a:	11 97       	sbiw	r26, 0x01	; 1
    117c:	9d 01       	movw	r18, r26
    117e:	2e 5f       	subi	r18, 0xFE	; 254
    1180:	3f 4f       	sbci	r19, 0xFF	; 255
    1182:	82 0f       	add	r24, r18
    1184:	93 1f       	adc	r25, r19
    1186:	20 91 99 03 	lds	r18, 0x0399	; 0x800399 <__brkval>
    118a:	30 91 9a 03 	lds	r19, 0x039A	; 0x80039a <__brkval+0x1>
    118e:	28 17       	cp	r18, r24
    1190:	39 07       	cpc	r19, r25
    1192:	69 f4       	brne	.+26     	; 0x11ae <free+0x10c>
    1194:	30 97       	sbiw	r30, 0x00	; 0
    1196:	29 f4       	brne	.+10     	; 0x11a2 <free+0x100>
    1198:	10 92 9c 03 	sts	0x039C, r1	; 0x80039c <__flp+0x1>
    119c:	10 92 9b 03 	sts	0x039B, r1	; 0x80039b <__flp>
    11a0:	02 c0       	rjmp	.+4      	; 0x11a6 <free+0x104>
    11a2:	13 82       	std	Z+3, r1	; 0x03
    11a4:	12 82       	std	Z+2, r1	; 0x02
    11a6:	b0 93 9a 03 	sts	0x039A, r27	; 0x80039a <__brkval+0x1>
    11aa:	a0 93 99 03 	sts	0x0399, r26	; 0x800399 <__brkval>
    11ae:	df 91       	pop	r29
    11b0:	cf 91       	pop	r28
    11b2:	08 95       	ret

000011b4 <_exit>:
    11b4:	f8 94       	cli

000011b6 <__stop_program>:
    11b6:	ff cf       	rjmp	.-2      	; 0x11b6 <__stop_program>
